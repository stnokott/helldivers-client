// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: dispatches.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const dispatchExists = `-- name: DispatchExists :one
SELECT EXISTS(SELECT id, create_time, type, message FROM dispatches WHERE id = $1)
`

func (q *Queries) DispatchExists(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, dispatchExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getDispatch = `-- name: GetDispatch :one
SELECT id FROM dispatches
WHERE id = $1
`

func (q *Queries) GetDispatch(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, getDispatch, id)
	err := row.Scan(&id)
	return id, err
}

const mergeDispatch = `-- name: MergeDispatch :execrows
INSERT INTO dispatches (
    id, create_time, type, message
) VALUES (
    $1, $2, $3, $4
)
ON CONFLICT (id) DO UPDATE
    SET create_time=$2, type=$3, message=$4
WHERE FALSE IN (
    EXCLUDED.create_time=$2, EXCLUDED.type=$3, EXCLUDED.message=$4
)
`

type MergeDispatchParams struct {
	ID         int32
	CreateTime pgtype.Timestamp
	Type       int32
	Message    string
}

func (q *Queries) MergeDispatch(ctx context.Context, arg MergeDispatchParams) (int64, error) {
	result, err := q.db.Exec(ctx, mergeDispatch,
		arg.ID,
		arg.CreateTime,
		arg.Type,
		arg.Message,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
