// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: planets.sql

package gen

import (
	"context"
)

const biomeExists = `-- name: BiomeExists :one
SELECT EXISTS(SELECT name, description FROM biomes WHERE name = $1)
`

func (q *Queries) BiomeExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, biomeExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getBiome = `-- name: GetBiome :one
SELECT name FROM biomes
WHERE name = $1
`

func (q *Queries) GetBiome(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getBiome, name)
	err := row.Scan(&name)
	return name, err
}

const getHazard = `-- name: GetHazard :one
SELECT name FROM hazards
WHERE name = $1
`

func (q *Queries) GetHazard(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getHazard, name)
	err := row.Scan(&name)
	return name, err
}

const getPlanet = `-- name: GetPlanet :one
SELECT id FROM planets
WHERE id = $1
`

func (q *Queries) GetPlanet(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, getPlanet, id)
	err := row.Scan(&id)
	return id, err
}

const hazardExists = `-- name: HazardExists :one
SELECT EXISTS(SELECT name, description FROM hazards WHERE name = $1)
`

func (q *Queries) HazardExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, hazardExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const mergeBiome = `-- name: MergeBiome :execrows
INSERT INTO biomes (
    name, description
) VALUES (
    $1, $2
)
ON CONFLICT (name) DO UPDATE
    SET description=$2
WHERE FALSE IN (
    EXCLUDED.description=$2
)
`

type MergeBiomeParams struct {
	Name        string
	Description string
}

func (q *Queries) MergeBiome(ctx context.Context, arg MergeBiomeParams) (int64, error) {
	result, err := q.db.Exec(ctx, mergeBiome, arg.Name, arg.Description)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const mergeHazard = `-- name: MergeHazard :execrows
INSERT INTO hazards (
    name, description
) VALUES (
    $1, $2
)
ON CONFLICT (name) DO UPDATE
    SET description=$2
WHERE FALSE IN (
    EXCLUDED.description=$2
)
`

type MergeHazardParams struct {
	Name        string
	Description string
}

func (q *Queries) MergeHazard(ctx context.Context, arg MergeHazardParams) (int64, error) {
	result, err := q.db.Exec(ctx, mergeHazard, arg.Name, arg.Description)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const mergePlanet = `-- name: MergePlanet :execrows
INSERT INTO planets (
    id, name, sector, position, waypoint_ids, disabled, biome_name, hazard_names, max_health, initial_owner
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
ON CONFLICT (id) DO UPDATE
    SET name=$2, sector=$3, position=$4, waypoint_ids=$5, disabled=$6, biome_name=$7, hazard_names=$8, max_health=$9, initial_owner=$10
WHERE FALSE IN (
    EXCLUDED.name=$2, EXCLUDED.sector=$3, EXCLUDED.position=$4,EXCLUDED. waypoint_ids=$5, EXCLUDED.disabled=$6, EXCLUDED.biome_name=$7, EXCLUDED.hazard_names=$8, EXCLUDED.max_health=$9, EXCLUDED.initial_owner=$10
)
`

type MergePlanetParams struct {
	ID           int32
	Name         string
	Sector       string
	Position     []float64
	WaypointIds  []int32
	Disabled     bool
	BiomeName    string
	HazardNames  []string
	MaxHealth    int64
	InitialOwner string
}

func (q *Queries) MergePlanet(ctx context.Context, arg MergePlanetParams) (int64, error) {
	result, err := q.db.Exec(ctx, mergePlanet,
		arg.ID,
		arg.Name,
		arg.Sector,
		arg.Position,
		arg.WaypointIds,
		arg.Disabled,
		arg.BiomeName,
		arg.HazardNames,
		arg.MaxHealth,
		arg.InitialOwner,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const planetExists = `-- name: PlanetExists :one
SELECT EXISTS(SELECT id, name, sector, position, waypoint_ids, disabled, biome_name, hazard_names, max_health, initial_owner FROM planets WHERE id = $1)
`

func (q *Queries) PlanetExists(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRow(ctx, planetExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
