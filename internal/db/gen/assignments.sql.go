// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: assignments.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAssignment = `-- name: GetAssignment :one
SELECT id FROM assignments
WHERE id = $1
`

func (q *Queries) GetAssignment(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAssignment, id)
	err := row.Scan(&id)
	return id, err
}

const insertAssignment = `-- name: InsertAssignment :one
INSERT INTO assignments (
    id, title, briefing, description, expiration, progress, task_ids, reward_type, reward_amount
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id
`

type InsertAssignmentParams struct {
	ID           int64
	Title        string
	Briefing     string
	Description  string
	Expiration   pgtype.Timestamp
	Progress     []int32
	TaskIds      []int64
	RewardType   int32
	RewardAmount int32
}

func (q *Queries) InsertAssignment(ctx context.Context, arg InsertAssignmentParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertAssignment,
		arg.ID,
		arg.Title,
		arg.Briefing,
		arg.Description,
		arg.Expiration,
		arg.Progress,
		arg.TaskIds,
		arg.RewardType,
		arg.RewardAmount,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertAssignmentTask = `-- name: InsertAssignmentTask :one
INSERT INTO assignment_tasks (
    type, values, value_types
) VALUES (
    $1, $2, $3
)
RETURNING id
`

type InsertAssignmentTaskParams struct {
	Type       int32
	Values     []int32
	ValueTypes []int32
}

func (q *Queries) InsertAssignmentTask(ctx context.Context, arg InsertAssignmentTaskParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertAssignmentTask, arg.Type, arg.Values, arg.ValueTypes)
	var id int64
	err := row.Scan(&id)
	return id, err
}
