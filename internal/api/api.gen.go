// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Assignment Represents an assignment given from Super Earth to the Helldivers.
type Assignment struct {
	// ExpiresIn The amount of seconds until this assignment expires.
	ExpiresIn *int64 `json:"expiresIn,omitempty"`

	// Id32 Internal identifier of this assignment.
	Id32 *int64 `json:"id32,omitempty"`

	// Progress A list of numbers, how they represent progress is unknown.
	Progress *[]uint64 `json:"progress,omitempty"`

	// Setting Contains detailed information on this assignment like briefing, rewards, ...
	Setting *Assignment_Setting `json:"setting,omitempty"`
}

// Assignment_Setting Contains detailed information on this assignment like briefing, rewards, ...
type Assignment_Setting struct {
	union json.RawMessage
}

// Assignment2 Represents an assignment given by Super Earth to the community.
// This is also known as 'Major Order's in the game.
type Assignment2 struct {
	// Briefing A long form description of the assignment, usually contains context.
	Briefing *Assignment2_Briefing `json:"briefing,omitempty"`

	// Description A very short summary of the description.
	Description *Assignment2_Description `json:"description,omitempty"`

	// Expiration The date when the assignment will expire.
	Expiration *time.Time `json:"expiration,omitempty"`

	// Id The unique identifier of this assignment.
	Id *int64 `json:"id,omitempty"`

	// Progress A list of numbers, how they represent progress is unknown.
	Progress *[]uint64 `json:"progress,omitempty"`

	// Reward The reward for completing the assignment.
	Reward *Assignment2_Reward `json:"reward,omitempty"`

	// Tasks A list of tasks that need to be completed for this assignment.
	Tasks *[]Task2 `json:"tasks,omitempty"`

	// Title The title of the assignment.
	Title *Assignment2_Title `json:"title,omitempty"`
}

// Assignment2Briefing0 defines model for .
type Assignment2Briefing0 = string

// Assignment2Briefing1 When passing in ivl-IV as Accept-Language, all available languages are returned
type Assignment2Briefing1 struct {
	// DeDE The message in de-DE
	DeDE *string `json:"de-DE,omitempty"`

	// EnUS The message in en-US
	EnUS *string `json:"en-US,omitempty"`

	// EsES The message in es-ES
	EsES *string `json:"es-ES,omitempty"`

	// FrFR The message in fr-FR
	FrFR *string `json:"fr-FR,omitempty"`

	// ItIT The message in it-IT
	ItIT *string `json:"it-IT,omitempty"`

	// PlPL The message in pl-PL
	PlPL *string `json:"pl-PL,omitempty"`

	// RuRU The message in ru-RU
	RuRU *string `json:"ru-RU,omitempty"`

	// ZhHans The message in zh-Hans
	ZhHans *string `json:"zh-Hans,omitempty"`

	// ZhHant The message in zh-Hant
	ZhHant *string `json:"zh-Hant,omitempty"`
}

// Assignment2_Briefing A long form description of the assignment, usually contains context.
type Assignment2_Briefing struct {
	union json.RawMessage
}

// Assignment2Description0 defines model for .
type Assignment2Description0 = string

// Assignment2Description1 When passing in ivl-IV as Accept-Language, all available languages are returned
type Assignment2Description1 struct {
	// DeDE The message in de-DE
	DeDE *string `json:"de-DE,omitempty"`

	// EnUS The message in en-US
	EnUS *string `json:"en-US,omitempty"`

	// EsES The message in es-ES
	EsES *string `json:"es-ES,omitempty"`

	// FrFR The message in fr-FR
	FrFR *string `json:"fr-FR,omitempty"`

	// ItIT The message in it-IT
	ItIT *string `json:"it-IT,omitempty"`

	// PlPL The message in pl-PL
	PlPL *string `json:"pl-PL,omitempty"`

	// RuRU The message in ru-RU
	RuRU *string `json:"ru-RU,omitempty"`

	// ZhHans The message in zh-Hans
	ZhHans *string `json:"zh-Hans,omitempty"`

	// ZhHant The message in zh-Hant
	ZhHant *string `json:"zh-Hant,omitempty"`
}

// Assignment2_Description A very short summary of the description.
type Assignment2_Description struct {
	union json.RawMessage
}

// Assignment2_Reward The reward for completing the assignment.
type Assignment2_Reward struct {
	union json.RawMessage
}

// Assignment2Title0 defines model for .
type Assignment2Title0 = string

// Assignment2Title1 When passing in ivl-IV as Accept-Language, all available languages are returned
type Assignment2Title1 struct {
	// DeDE The message in de-DE
	DeDE *string `json:"de-DE,omitempty"`

	// EnUS The message in en-US
	EnUS *string `json:"en-US,omitempty"`

	// EsES The message in es-ES
	EsES *string `json:"es-ES,omitempty"`

	// FrFR The message in fr-FR
	FrFR *string `json:"fr-FR,omitempty"`

	// ItIT The message in it-IT
	ItIT *string `json:"it-IT,omitempty"`

	// PlPL The message in pl-PL
	PlPL *string `json:"pl-PL,omitempty"`

	// RuRU The message in ru-RU
	RuRU *string `json:"ru-RU,omitempty"`

	// ZhHans The message in zh-Hans
	ZhHans *string `json:"zh-Hans,omitempty"`

	// ZhHant The message in zh-Hant
	ZhHant *string `json:"zh-Hant,omitempty"`
}

// Assignment2_Title The title of the assignment.
type Assignment2_Title struct {
	union json.RawMessage
}

// Biome Represents information about a biome of a planet.
type Biome struct {
	// Description A human-readable description of the biome.
	Description *string `json:"description,omitempty"`

	// Name The name of this biome.
	Name *string `json:"name,omitempty"`
}

// Campaign Contains information of ongoing campaigns.
type Campaign struct {
	// Count A numerical count, the amount of campaigns the planet has seen.
	Count *uint64 `json:"count,omitempty"`

	// Id The identifier of this campaign.
	Id *int32 `json:"id,omitempty"`

	// PlanetIndex The Index of the planet this campaign refers to.
	PlanetIndex *int32 `json:"planetIndex,omitempty"`

	// Type A numerical type, indicates the type of campaign (see helldivers-2/json).
	Type *int32 `json:"type,omitempty"`
}

// Campaign2 Represents an ongoing campaign on a planet.
type Campaign2 struct {
	// Count Indicates how many campaigns have already been fought on this Planet.
	Count *uint64 `json:"count,omitempty"`

	// Id The unique identifier of this Campaign.
	Id *int32 `json:"id,omitempty"`

	// Planet The planet on which this campaign is being fought.
	Planet *Campaign2_Planet `json:"planet,omitempty"`

	// Type The type of campaign, this should be mapped onto an enum.
	Type *int32 `json:"type,omitempty"`
}

// Campaign2_Planet The planet on which this campaign is being fought.
type Campaign2_Planet struct {
	union json.RawMessage
}

// Dispatch A message from high command to the players, usually updates on the status of the war effort.
type Dispatch struct {
	// Id The unique identifier of this dispatch.
	Id *int32 `json:"id,omitempty"`

	// Message The message this dispatch represents.
	Message *Dispatch_Message `json:"message,omitempty"`

	// Published When the dispatch was published.
	Published *time.Time `json:"published,omitempty"`

	// Type The type of dispatch, purpose unknown.
	Type *int32 `json:"type,omitempty"`
}

// DispatchMessage0 defines model for .
type DispatchMessage0 = string

// DispatchMessage1 When passing in ivl-IV as Accept-Language, all available languages are returned
type DispatchMessage1 struct {
	// DeDE The message in de-DE
	DeDE *string `json:"de-DE,omitempty"`

	// EnUS The message in en-US
	EnUS *string `json:"en-US,omitempty"`

	// EsES The message in es-ES
	EsES *string `json:"es-ES,omitempty"`

	// FrFR The message in fr-FR
	FrFR *string `json:"fr-FR,omitempty"`

	// ItIT The message in it-IT
	ItIT *string `json:"it-IT,omitempty"`

	// PlPL The message in pl-PL
	PlPL *string `json:"pl-PL,omitempty"`

	// RuRU The message in ru-RU
	RuRU *string `json:"ru-RU,omitempty"`

	// ZhHans The message in zh-Hans
	ZhHans *string `json:"zh-Hans,omitempty"`

	// ZhHant The message in zh-Hant
	ZhHant *string `json:"zh-Hant,omitempty"`
}

// Dispatch_Message The message this dispatch represents.
type Dispatch_Message struct {
	union json.RawMessage
}

// Event An ongoing event on a Planet.
type Event struct {
	// CampaignId The identifier of the Campaign linked to this event.
	CampaignId *int32 `json:"campaignId,omitempty"`

	// EndTime When the event will end.
	EndTime *time.Time `json:"endTime,omitempty"`

	// EventType The type of event.
	EventType *int32 `json:"eventType,omitempty"`

	// Faction The faction that initiated the event.
	Faction *string `json:"faction,omitempty"`

	// Health The health of the Event at the time of snapshot.
	Health *int64 `json:"health,omitempty"`

	// Id The unique identifier of this event.
	Id *int32 `json:"id,omitempty"`

	// JointOperationIds A list of joint operation identifier linked to this event.
	JointOperationIds *[]int32 `json:"jointOperationIds,omitempty"`

	// MaxHealth The maximum health of the Event at the time of snapshot.
	MaxHealth *int64 `json:"maxHealth,omitempty"`

	// StartTime When the event started.
	StartTime *time.Time `json:"startTime,omitempty"`
}

// GalaxyStats Represents galaxy wide statistics.
type GalaxyStats struct {
	// Accurracy A percentage indicating average accuracy of Helldivers.
	Accurracy *uint64 `json:"accurracy,omitempty"`

	// AutomatonKills The total amount of automatons killed since start of the season.
	AutomatonKills *uint64 `json:"automatonKills,omitempty"`

	// BugKills The total amount of bugs killed since start of the season.
	BugKills *uint64 `json:"bugKills,omitempty"`

	// BulletsFired The total amount of bullets fired
	BulletsFired *uint64 `json:"bulletsFired,omitempty"`

	// BulletsHit The total amount of bullets hit
	BulletsHit *uint64 `json:"bulletsHit,omitempty"`

	// Deaths The amount of casualties on the side of humanity.
	Deaths *uint64 `json:"deaths,omitempty"`

	// Friendlies The amount of friendly fire casualties.
	Friendlies *uint64 `json:"friendlies,omitempty"`

	// IlluminateKills The total amount of Illuminate killed since start of the season.
	IlluminateKills *uint64 `json:"illuminateKills,omitempty"`

	// MissionSuccessRate A percentage indicating how many started missions end in success.
	MissionSuccessRate *uint64 `json:"missionSuccessRate,omitempty"`

	// MissionTime The total amount of time spent planetside (in seconds).
	MissionTime *uint64 `json:"missionTime,omitempty"`

	// MissionsLost The amount of missions lost.
	MissionsLost *uint64 `json:"missionsLost,omitempty"`

	// MissionsWon The amount of missions won.
	MissionsWon *uint64 `json:"missionsWon,omitempty"`

	// Revives The amount of revives(?).
	Revives *uint64 `json:"revives,omitempty"`

	// TimePlayed The total amount of time played (including off-planet) in seconds.
	TimePlayed *uint64 `json:"timePlayed,omitempty"`
}

// Hazard Describes an environmental hazard that can be present on a Planet.
type Hazard struct {
	// Description The description of the environmental hazard.
	Description *string `json:"description,omitempty"`

	// Name The name of this environmental hazard.
	Name *string `json:"name,omitempty"`
}

// HomeWorld Represents information about the homeworld(s) of a given race.
type HomeWorld struct {
	// PlanetIndices A list of Index identifiers.
	PlanetIndices *[]int32 `json:"planetIndices,omitempty"`

	// Race The identifier of the race (faction) this describes the homeworld of.
	Race *int32 `json:"race,omitempty"`
}

// JointOperation Represents a joint operation.
type JointOperation struct {
	HqNodeIndex *int32 `json:"hqNodeIndex,omitempty"`
	Id          *int32 `json:"id,omitempty"`
	PlanetIndex *int32 `json:"planetIndex,omitempty"`
}

// NewsFeedItem Represents an item in the newsfeed of Super Earth.
type NewsFeedItem struct {
	// Id The identifier of this newsfeed item.
	Id *int32 `json:"id,omitempty"`

	// Message The message containing a human readable text.
	Message *string `json:"message,omitempty"`

	// Published A unix timestamp (in seconds) when this item was published.
	Published *int64 `json:"published,omitempty"`

	// Type A numerical type, purpose unknown.
	Type *int32 `json:"type,omitempty"`
}

// Planet Contains all aggregated information AH has about a planet.
type Planet struct {
	// Attacking A list of Index integers that this planet is currently attacking.
	Attacking *[]int32 `json:"attacking,omitempty"`

	// Biome The biome this planet has.
	Biome *Planet_Biome `json:"biome,omitempty"`

	// CurrentOwner The faction that currently controls the planet.
	CurrentOwner *string `json:"currentOwner,omitempty"`

	// Disabled Whether or not this planet is disabled, as assigned by ArrowHead.
	Disabled *bool `json:"disabled,omitempty"`

	// Event Information on the active event ongoing on this planet, if one is active.
	Event *Planet_Event `json:"event"`

	// Hash A hash assigned to the planet by ArrowHead, purpose unknown.
	Hash *int64 `json:"hash,omitempty"`

	// Hazards All Hazards that are applicable to this planet.
	Hazards *[]Hazard `json:"hazards,omitempty"`

	// Health The current planet this planet has.
	Health *int64 `json:"health,omitempty"`

	// Index The unique identifier ArrowHead assigned to this planet.
	Index *int32 `json:"index,omitempty"`

	// InitialOwner The faction that originally owned the planet.
	InitialOwner *string `json:"initialOwner,omitempty"`

	// MaxHealth The maximum health pool of this planet.
	MaxHealth *int64 `json:"maxHealth,omitempty"`

	// Name The name of the planet, as shown in game.
	Name *Planet_Name `json:"name,omitempty"`

	// Position The coordinates of this planet on the galactic war map.
	Position *Planet_Position `json:"position,omitempty"`

	// RegenPerSecond How much the planet regenerates per second if left alone.
	RegenPerSecond *float64 `json:"regenPerSecond,omitempty"`

	// Sector The name of the sector the planet is in, as shown in game.
	Sector *string `json:"sector,omitempty"`

	// Statistics A set of statistics scoped to this planet.
	Statistics *Planet_Statistics `json:"statistics,omitempty"`

	// Waypoints A list of Index of all the planets to which this planet is connected.
	Waypoints *[]int32 `json:"waypoints,omitempty"`
}

// Planet_Biome The biome this planet has.
type Planet_Biome struct {
	union json.RawMessage
}

// Planet_Event Information on the active event ongoing on this planet, if one is active.
type Planet_Event struct {
	union json.RawMessage
}

// PlanetName0 defines model for .
type PlanetName0 = string

// PlanetName1 When passing in ivl-IV as Accept-Language, all available languages are returned
type PlanetName1 struct {
	// DeDE The message in de-DE
	DeDE *string `json:"de-DE,omitempty"`

	// EnUS The message in en-US
	EnUS *string `json:"en-US,omitempty"`

	// EsES The message in es-ES
	EsES *string `json:"es-ES,omitempty"`

	// FrFR The message in fr-FR
	FrFR *string `json:"fr-FR,omitempty"`

	// ItIT The message in it-IT
	ItIT *string `json:"it-IT,omitempty"`

	// PlPL The message in pl-PL
	PlPL *string `json:"pl-PL,omitempty"`

	// RuRU The message in ru-RU
	RuRU *string `json:"ru-RU,omitempty"`

	// ZhHans The message in zh-Hans
	ZhHans *string `json:"zh-Hans,omitempty"`

	// ZhHant The message in zh-Hant
	ZhHant *string `json:"zh-Hant,omitempty"`
}

// Planet_Name The name of the planet, as shown in game.
type Planet_Name struct {
	union json.RawMessage
}

// Planet_Position The coordinates of this planet on the galactic war map.
type Planet_Position struct {
	union json.RawMessage
}

// Planet_Statistics A set of statistics scoped to this planet.
type Planet_Statistics struct {
	union json.RawMessage
}

// PlanetAttack Represents an attack on a PlanetInfo.
type PlanetAttack struct {
	// Source Where the attack originates from.
	Source *int32 `json:"source,omitempty"`

	// Target The planet under attack.
	Target *int32 `json:"target,omitempty"`
}

// PlanetCoordinates Represents a set of coordinates returned by ArrowHead's API.
type PlanetCoordinates struct {
	// X The X coordinate
	X *float64 `json:"x,omitempty"`

	// Y The Y coordinate
	Y *float64 `json:"y,omitempty"`
}

// PlanetEvent An ongoing event on a planet.
type PlanetEvent struct {
	// CampaignId The unique identifier of a related campaign.
	CampaignId *int32 `json:"campaignId,omitempty"`

	// EventType A numerical identifier that indicates what type of event this is.
	EventType *int32 `json:"eventType,omitempty"`

	// ExpireTime When the event will end.
	ExpireTime *int64 `json:"expireTime,omitempty"`

	// Health The current health of the event.
	Health *int64 `json:"health,omitempty"`

	// Id The unique identifier of this event.
	Id *int32 `json:"id,omitempty"`

	// JointOperationIds A list of identifiers of related joint operations.
	JointOperationIds *[]int32 `json:"jointOperationIds,omitempty"`

	// MaxHealth The current maximum health of the event.
	MaxHealth *int64 `json:"maxHealth,omitempty"`

	// PlanetIndex The index of the planet.
	PlanetIndex *int32 `json:"planetIndex,omitempty"`

	// Race The identifier of the faction that owns the planet currently.
	Race *int32 `json:"race,omitempty"`

	// StartTime When this event started.
	StartTime *int64 `json:"startTime,omitempty"`
}

// PlanetInfo Represents information of a planet from the 'WarInfo' endpoint returned by ArrowHead's API.
type PlanetInfo struct {
	// Disabled Whether this planet is currently considered active in the galactic war.
	Disabled *bool `json:"disabled,omitempty"`

	// Index The numerical identifier for this planet, used as reference by other properties throughout the API (like Waypoints).
	Index *int32 `json:"index,omitempty"`

	// InitialOwner The identifier of the faction that initially owned this planet.
	InitialOwner *int32 `json:"initialOwner,omitempty"`

	// MaxHealth The 'health' of this planet, indicates how much liberation it needs to switch sides.
	MaxHealth *int64 `json:"maxHealth,omitempty"`

	// Position A set of X/Y coordinates specifying the position of this planet on the galaxy map.
	Position *PlanetInfo_Position `json:"position,omitempty"`

	// Sector The identifier of the sector this planet is located in.
	Sector *int32 `json:"sector,omitempty"`

	// SettingsHash Purpose unknown at this time.
	SettingsHash *int64 `json:"settingsHash,omitempty"`

	// Waypoints A list of links to other planets (supply lines).
	Waypoints *[]int32 `json:"waypoints,omitempty"`
}

// PlanetInfo_Position A set of X/Y coordinates specifying the position of this planet on the galaxy map.
type PlanetInfo_Position struct {
	union json.RawMessage
}

// PlanetStats Similar to GalaxyStats, but scoped to a specific planet.
type PlanetStats struct {
	// Accurracy A percentage indicating average accuracy of Helldivers.
	Accurracy *uint64 `json:"accurracy,omitempty"`

	// AutomatonKills The total amount of automatons killed since start of the season.
	AutomatonKills *uint64 `json:"automatonKills,omitempty"`

	// BugKills The total amount of bugs killed since start of the season.
	BugKills *uint64 `json:"bugKills,omitempty"`

	// BulletsFired The total amount of bullets fired
	BulletsFired *uint64 `json:"bulletsFired,omitempty"`

	// BulletsHit The total amount of bullets hit
	BulletsHit *uint64 `json:"bulletsHit,omitempty"`

	// Deaths The amount of casualties on the side of humanity.
	Deaths *uint64 `json:"deaths,omitempty"`

	// Friendlies The amount of friendly fire casualties.
	Friendlies *uint64 `json:"friendlies,omitempty"`

	// IlluminateKills The total amount of Illuminate killed since start of the season.
	IlluminateKills *uint64 `json:"illuminateKills,omitempty"`

	// MissionSuccessRate A percentage indicating how many started missions end in success.
	MissionSuccessRate *uint64 `json:"missionSuccessRate,omitempty"`

	// MissionTime The total amount of time spent planetside (in seconds).
	MissionTime *uint64 `json:"missionTime,omitempty"`

	// MissionsLost The amount of missions lost.
	MissionsLost *uint64 `json:"missionsLost,omitempty"`

	// MissionsWon The amount of missions won.
	MissionsWon *uint64 `json:"missionsWon,omitempty"`

	// PlanetIndex The Index for which planet these stats are.
	PlanetIndex *int32 `json:"planetIndex,omitempty"`

	// Revives The amount of revives(?).
	Revives *uint64 `json:"revives,omitempty"`

	// TimePlayed The total amount of time played (including off-planet) in seconds.
	TimePlayed *uint64 `json:"timePlayed,omitempty"`
}

// PlanetStatus Represents the 'current' status of a planet in the galactic war.
type PlanetStatus struct {
	// Health The current health / liberation of a planet.
	Health *int64 `json:"health,omitempty"`

	// Index The identifier of the PlanetInfo this status refers to.
	Index *int32 `json:"index,omitempty"`

	// Owner The faction currently owning the planet.
	Owner *int32 `json:"owner,omitempty"`

	// Players The amount of helldivers currently active on this planet.
	Players *uint64 `json:"players,omitempty"`

	// RegenPerSecond If left alone, how much the health of the planet would regenerate.
	RegenPerSecond *float64 `json:"regenPerSecond,omitempty"`
}

// Position Represents a position on the galactic war map.
type Position struct {
	// X The X coordinate.
	X *float64 `json:"x,omitempty"`

	// Y The Y coordinate.
	Y *float64 `json:"y,omitempty"`
}

// Reward Represents the reward of an Assignment.
type Reward struct {
	// Amount The amount of Type the players will receive upon completion.
	Amount *uint64 `json:"amount,omitempty"`

	// Id32 Internal identifier of this Reward.
	Id32 *uint64 `json:"id32,omitempty"`

	// Type The type of reward, currently only one value is known: 1 which represents Medals
	Type *int32 `json:"type,omitempty"`
}

// Reward2 The reward for completing an Assignment.
type Reward2 struct {
	// Amount The amount of Type that will be awarded.
	Amount *uint64 `json:"amount,omitempty"`

	// Type The type of reward (medals, super credits, ...).
	Type *int32 `json:"type,omitempty"`
}

// Setting Contains the details of an Assignment like reward and requirements.
type Setting struct {
	// Flags Flags, suspected to be a binary OR'd value, purpose unknown.
	Flags *int32 `json:"flags,omitempty"`

	// OverrideBrief The briefing (description) of this assignment.
	OverrideBrief *string `json:"overrideBrief,omitempty"`

	// OverrideTitle The title of this assignment.
	OverrideTitle *string `json:"overrideTitle,omitempty"`

	// Reward Contains information on the rewards players willr eceive upon completion.
	Reward *Setting_Reward `json:"reward,omitempty"`

	// TaskDescription A description of what is expected of Helldivers to complete the assignment.
	TaskDescription *string `json:"taskDescription,omitempty"`

	// Tasks A list of Tasks describing the assignment requirements.
	Tasks *[]Task `json:"tasks,omitempty"`

	// Type The type of assignment, values unknown at the moment.
	Type *int32 `json:"type,omitempty"`
}

// Setting_Reward Contains information on the rewards players willr eceive upon completion.
type Setting_Reward struct {
	union json.RawMessage
}

// Statistics Contains statistics of missions, kills, success rate etc.
type Statistics struct {
	// Accuracy A percentage indicating average accuracy of Helldivers.
	Accuracy *uint64 `json:"accuracy,omitempty"`

	// AutomatonKills The total amount of automatons killed since start of the season.
	AutomatonKills *uint64 `json:"automatonKills,omitempty"`

	// BulletsFired The total amount of bullets fired
	BulletsFired *uint64 `json:"bulletsFired,omitempty"`

	// BulletsHit The total amount of bullets hit
	BulletsHit *uint64 `json:"bulletsHit,omitempty"`

	// Deaths The amount of casualties on the side of humanity.
	Deaths *uint64 `json:"deaths,omitempty"`

	// Friendlies The amount of friendly fire casualties.
	Friendlies *uint64 `json:"friendlies,omitempty"`

	// IlluminateKills The total amount of Illuminate killed since start of the season.
	IlluminateKills *uint64 `json:"illuminateKills,omitempty"`

	// MissionSuccessRate A percentage indicating how many started missions end in success.
	MissionSuccessRate *uint64 `json:"missionSuccessRate,omitempty"`

	// MissionTime The total amount of time spent planetside (in seconds).
	MissionTime *uint64 `json:"missionTime,omitempty"`

	// MissionsLost The amount of missions lost.
	MissionsLost *uint64 `json:"missionsLost,omitempty"`

	// MissionsWon The amount of missions won.
	MissionsWon *uint64 `json:"missionsWon,omitempty"`

	// PlayerCount The total amount of players present (at the time of the snapshot).
	PlayerCount *uint64 `json:"playerCount,omitempty"`

	// Revives The amount of revives(?).
	Revives *uint64 `json:"revives,omitempty"`

	// TerminidKills The total amount of bugs killed since start of the season.
	TerminidKills *uint64 `json:"terminidKills,omitempty"`

	// TimePlayed The total amount of time played (including off-planet) in seconds.
	TimePlayed *uint64 `json:"timePlayed,omitempty"`
}

// SteamNews Represents a new article from Steam's news feed.
type SteamNews struct {
	// Author The author who posted this message on Steam.
	Author *string `json:"author,omitempty"`

	// Content The message posted by Steam, currently in Steam's weird markdown format.
	Content *string `json:"content,omitempty"`

	// Id The identifier assigned by Steam to this news item.
	Id *string `json:"id,omitempty"`

	// PublishedAt When this message was posted.
	PublishedAt *time.Time `json:"publishedAt,omitempty"`

	// Title The title of the Steam news item.
	Title *string `json:"title,omitempty"`

	// Url The URL to Steam where this news item was posted.
	Url *string `json:"url,omitempty"`
}

// Task Represents a task in an Assignment.
// It's exact values are not known, therefore little of it's purpose is clear.
type Task struct {
	// Type A numerical value, purpose unknown.
	Type *int32 `json:"type,omitempty"`

	// ValueTypes A list of numerical values, purpose unknown.
	ValueTypes *[]uint64 `json:"valueTypes,omitempty"`

	// Values A list of numerical values, purpose unknown.
	Values *[]uint64 `json:"values,omitempty"`
}

// Task2 Represents a task in an Assignment that needs to be completed
// to finish the assignment.
type Task2 struct {
	// Type The type of task this represents.
	Type *int32 `json:"type,omitempty"`

	// ValueTypes A list of numbers, purpose unknown
	ValueTypes *[]uint64 `json:"valueTypes,omitempty"`

	// Values A list of numbers, purpose unknown.
	Values *[]uint64 `json:"values,omitempty"`
}

// War Global information of the ongoing war.
type War struct {
	// ClientVersion The minimum game client version required to play in this war.
	ClientVersion *string `json:"clientVersion,omitempty"`

	// Ended When this war will end (or has ended).
	Ended *time.Time `json:"ended,omitempty"`

	// Factions A list of factions currently involved in the war.
	Factions *[]string `json:"factions,omitempty"`

	// ImpactMultiplier A fraction used to calculate the impact of a mission on the war effort.
	ImpactMultiplier *float64 `json:"impactMultiplier,omitempty"`

	// Now The time the snapshot of the war was taken, also doubles as the timestamp of which all other data dates from.
	Now *time.Time `json:"now,omitempty"`

	// Started When this war was started.
	Started *time.Time `json:"started,omitempty"`

	// Statistics The statistics available for the galaxy wide war effort.
	Statistics *War_Statistics `json:"statistics,omitempty"`
}

// War_Statistics The statistics available for the galaxy wide war effort.
type War_Statistics struct {
	union json.RawMessage
}

// WarId Represents the ID returned from the WarID endpoint.
type WarId struct {
	Id *int32 `json:"id,omitempty"`
}

// WarInfo Represents mostly static information of the current galactic war.
type WarInfo struct {
	// EndDate A unix timestamp (in seconds) when this season will end.
	EndDate *int64 `json:"endDate,omitempty"`

	// HomeWorlds A list of homeworlds for the races (factions) involved in this war.
	HomeWorlds *[]HomeWorld `json:"homeWorlds,omitempty"`

	// MinimumClientVersion A version string indicating the minimum game client version the API supports.
	MinimumClientVersion *string `json:"minimumClientVersion,omitempty"`

	// PlanetInfos A list of planets involved in this season's war.
	PlanetInfos *[]PlanetInfo `json:"planetInfos,omitempty"`

	// StartDate A unix timestamp (in seconds) when this season started.
	StartDate *int64 `json:"startDate,omitempty"`

	// WarId The identifier of the war season this WarInfo represents.
	WarId *int32 `json:"warId,omitempty"`
}

// WarStatus Represents a snapshot of the current status of the galactic war.
type WarStatus struct {
	// Campaigns A list of ongoing campaigns in the galactic war.
	Campaigns *[]Campaign `json:"campaigns,omitempty"`

	// ImpactMultiplier This is the factor by which influence at the end of a mission is multiplied to calculate the impact on liberation
	ImpactMultiplier *float64 `json:"impactMultiplier,omitempty"`

	// JointOperations A list of JointOperations.
	JointOperations *[]JointOperation `json:"jointOperations,omitempty"`

	// PlanetAttacks A list of attacks currently ongoing.
	PlanetAttacks *[]PlanetAttack `json:"planetAttacks,omitempty"`

	// PlanetEvents A list of ongoing PlanetEvents.
	PlanetEvents *[]PlanetEvent `json:"planetEvents,omitempty"`

	// PlanetStatus A list of statuses for planets.
	PlanetStatus *[]PlanetStatus `json:"planetStatus,omitempty"`

	// StoryBeatId32 Internal identifier, purpose unknown.
	StoryBeatId32 *int64 `json:"storyBeatId32,omitempty"`

	// Time The time this snapshot was taken.
	Time *int64 `json:"time,omitempty"`

	// WarId The war season this snapshot refers to.
	WarId *int32 `json:"warId,omitempty"`
}

// WarSummary Gets general statistics about the galaxy and specific planets.
type WarSummary struct {
	// GalaxyStats Contains galaxy wide statistics aggregated from all planets.
	GalaxyStats *WarSummary_GalaxyStats `json:"galaxy_stats,omitempty"`

	// PlanetsStats Contains statistics for specific planets.
	PlanetsStats *[]PlanetStats `json:"planets_stats,omitempty"`
}

// WarSummary_GalaxyStats Contains galaxy wide statistics aggregated from all planets.
type WarSummary_GalaxyStats struct {
	union json.RawMessage
}

// AsSetting returns the union data inside the Assignment_Setting as a Setting
func (t Assignment_Setting) AsSetting() (Setting, error) {
	var body Setting
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSetting overwrites any union data inside the Assignment_Setting as the provided Setting
func (t *Assignment_Setting) FromSetting(v Setting) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSetting performs a merge with any union data inside the Assignment_Setting, using the provided Setting
func (t *Assignment_Setting) MergeSetting(v Setting) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Assignment_Setting) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Assignment_Setting) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssignment2Briefing0 returns the union data inside the Assignment2_Briefing as a Assignment2Briefing0
func (t Assignment2_Briefing) AsAssignment2Briefing0() (Assignment2Briefing0, error) {
	var body Assignment2Briefing0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssignment2Briefing0 overwrites any union data inside the Assignment2_Briefing as the provided Assignment2Briefing0
func (t *Assignment2_Briefing) FromAssignment2Briefing0(v Assignment2Briefing0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssignment2Briefing0 performs a merge with any union data inside the Assignment2_Briefing, using the provided Assignment2Briefing0
func (t *Assignment2_Briefing) MergeAssignment2Briefing0(v Assignment2Briefing0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssignment2Briefing1 returns the union data inside the Assignment2_Briefing as a Assignment2Briefing1
func (t Assignment2_Briefing) AsAssignment2Briefing1() (Assignment2Briefing1, error) {
	var body Assignment2Briefing1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssignment2Briefing1 overwrites any union data inside the Assignment2_Briefing as the provided Assignment2Briefing1
func (t *Assignment2_Briefing) FromAssignment2Briefing1(v Assignment2Briefing1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssignment2Briefing1 performs a merge with any union data inside the Assignment2_Briefing, using the provided Assignment2Briefing1
func (t *Assignment2_Briefing) MergeAssignment2Briefing1(v Assignment2Briefing1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Assignment2_Briefing) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Assignment2_Briefing) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssignment2Description0 returns the union data inside the Assignment2_Description as a Assignment2Description0
func (t Assignment2_Description) AsAssignment2Description0() (Assignment2Description0, error) {
	var body Assignment2Description0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssignment2Description0 overwrites any union data inside the Assignment2_Description as the provided Assignment2Description0
func (t *Assignment2_Description) FromAssignment2Description0(v Assignment2Description0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssignment2Description0 performs a merge with any union data inside the Assignment2_Description, using the provided Assignment2Description0
func (t *Assignment2_Description) MergeAssignment2Description0(v Assignment2Description0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssignment2Description1 returns the union data inside the Assignment2_Description as a Assignment2Description1
func (t Assignment2_Description) AsAssignment2Description1() (Assignment2Description1, error) {
	var body Assignment2Description1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssignment2Description1 overwrites any union data inside the Assignment2_Description as the provided Assignment2Description1
func (t *Assignment2_Description) FromAssignment2Description1(v Assignment2Description1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssignment2Description1 performs a merge with any union data inside the Assignment2_Description, using the provided Assignment2Description1
func (t *Assignment2_Description) MergeAssignment2Description1(v Assignment2Description1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Assignment2_Description) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Assignment2_Description) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsReward2 returns the union data inside the Assignment2_Reward as a Reward2
func (t Assignment2_Reward) AsReward2() (Reward2, error) {
	var body Reward2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReward2 overwrites any union data inside the Assignment2_Reward as the provided Reward2
func (t *Assignment2_Reward) FromReward2(v Reward2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReward2 performs a merge with any union data inside the Assignment2_Reward, using the provided Reward2
func (t *Assignment2_Reward) MergeReward2(v Reward2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Assignment2_Reward) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Assignment2_Reward) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAssignment2Title0 returns the union data inside the Assignment2_Title as a Assignment2Title0
func (t Assignment2_Title) AsAssignment2Title0() (Assignment2Title0, error) {
	var body Assignment2Title0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssignment2Title0 overwrites any union data inside the Assignment2_Title as the provided Assignment2Title0
func (t *Assignment2_Title) FromAssignment2Title0(v Assignment2Title0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssignment2Title0 performs a merge with any union data inside the Assignment2_Title, using the provided Assignment2Title0
func (t *Assignment2_Title) MergeAssignment2Title0(v Assignment2Title0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAssignment2Title1 returns the union data inside the Assignment2_Title as a Assignment2Title1
func (t Assignment2_Title) AsAssignment2Title1() (Assignment2Title1, error) {
	var body Assignment2Title1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAssignment2Title1 overwrites any union data inside the Assignment2_Title as the provided Assignment2Title1
func (t *Assignment2_Title) FromAssignment2Title1(v Assignment2Title1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAssignment2Title1 performs a merge with any union data inside the Assignment2_Title, using the provided Assignment2Title1
func (t *Assignment2_Title) MergeAssignment2Title1(v Assignment2Title1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Assignment2_Title) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Assignment2_Title) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlanet returns the union data inside the Campaign2_Planet as a Planet
func (t Campaign2_Planet) AsPlanet() (Planet, error) {
	var body Planet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanet overwrites any union data inside the Campaign2_Planet as the provided Planet
func (t *Campaign2_Planet) FromPlanet(v Planet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanet performs a merge with any union data inside the Campaign2_Planet, using the provided Planet
func (t *Campaign2_Planet) MergePlanet(v Planet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Campaign2_Planet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Campaign2_Planet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDispatchMessage0 returns the union data inside the Dispatch_Message as a DispatchMessage0
func (t Dispatch_Message) AsDispatchMessage0() (DispatchMessage0, error) {
	var body DispatchMessage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDispatchMessage0 overwrites any union data inside the Dispatch_Message as the provided DispatchMessage0
func (t *Dispatch_Message) FromDispatchMessage0(v DispatchMessage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDispatchMessage0 performs a merge with any union data inside the Dispatch_Message, using the provided DispatchMessage0
func (t *Dispatch_Message) MergeDispatchMessage0(v DispatchMessage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDispatchMessage1 returns the union data inside the Dispatch_Message as a DispatchMessage1
func (t Dispatch_Message) AsDispatchMessage1() (DispatchMessage1, error) {
	var body DispatchMessage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDispatchMessage1 overwrites any union data inside the Dispatch_Message as the provided DispatchMessage1
func (t *Dispatch_Message) FromDispatchMessage1(v DispatchMessage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDispatchMessage1 performs a merge with any union data inside the Dispatch_Message, using the provided DispatchMessage1
func (t *Dispatch_Message) MergeDispatchMessage1(v DispatchMessage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Dispatch_Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Dispatch_Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBiome returns the union data inside the Planet_Biome as a Biome
func (t Planet_Biome) AsBiome() (Biome, error) {
	var body Biome
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBiome overwrites any union data inside the Planet_Biome as the provided Biome
func (t *Planet_Biome) FromBiome(v Biome) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBiome performs a merge with any union data inside the Planet_Biome, using the provided Biome
func (t *Planet_Biome) MergeBiome(v Biome) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Planet_Biome) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Planet_Biome) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEvent returns the union data inside the Planet_Event as a Event
func (t Planet_Event) AsEvent() (Event, error) {
	var body Event
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEvent overwrites any union data inside the Planet_Event as the provided Event
func (t *Planet_Event) FromEvent(v Event) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEvent performs a merge with any union data inside the Planet_Event, using the provided Event
func (t *Planet_Event) MergeEvent(v Event) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Planet_Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Planet_Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlanetName0 returns the union data inside the Planet_Name as a PlanetName0
func (t Planet_Name) AsPlanetName0() (PlanetName0, error) {
	var body PlanetName0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanetName0 overwrites any union data inside the Planet_Name as the provided PlanetName0
func (t *Planet_Name) FromPlanetName0(v PlanetName0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanetName0 performs a merge with any union data inside the Planet_Name, using the provided PlanetName0
func (t *Planet_Name) MergePlanetName0(v PlanetName0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPlanetName1 returns the union data inside the Planet_Name as a PlanetName1
func (t Planet_Name) AsPlanetName1() (PlanetName1, error) {
	var body PlanetName1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanetName1 overwrites any union data inside the Planet_Name as the provided PlanetName1
func (t *Planet_Name) FromPlanetName1(v PlanetName1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanetName1 performs a merge with any union data inside the Planet_Name, using the provided PlanetName1
func (t *Planet_Name) MergePlanetName1(v PlanetName1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Planet_Name) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Planet_Name) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPosition returns the union data inside the Planet_Position as a Position
func (t Planet_Position) AsPosition() (Position, error) {
	var body Position
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPosition overwrites any union data inside the Planet_Position as the provided Position
func (t *Planet_Position) FromPosition(v Position) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePosition performs a merge with any union data inside the Planet_Position, using the provided Position
func (t *Planet_Position) MergePosition(v Position) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Planet_Position) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Planet_Position) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStatistics returns the union data inside the Planet_Statistics as a Statistics
func (t Planet_Statistics) AsStatistics() (Statistics, error) {
	var body Statistics
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStatistics overwrites any union data inside the Planet_Statistics as the provided Statistics
func (t *Planet_Statistics) FromStatistics(v Statistics) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStatistics performs a merge with any union data inside the Planet_Statistics, using the provided Statistics
func (t *Planet_Statistics) MergeStatistics(v Statistics) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Planet_Statistics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Planet_Statistics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPlanetCoordinates returns the union data inside the PlanetInfo_Position as a PlanetCoordinates
func (t PlanetInfo_Position) AsPlanetCoordinates() (PlanetCoordinates, error) {
	var body PlanetCoordinates
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPlanetCoordinates overwrites any union data inside the PlanetInfo_Position as the provided PlanetCoordinates
func (t *PlanetInfo_Position) FromPlanetCoordinates(v PlanetCoordinates) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePlanetCoordinates performs a merge with any union data inside the PlanetInfo_Position, using the provided PlanetCoordinates
func (t *PlanetInfo_Position) MergePlanetCoordinates(v PlanetCoordinates) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PlanetInfo_Position) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PlanetInfo_Position) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsReward returns the union data inside the Setting_Reward as a Reward
func (t Setting_Reward) AsReward() (Reward, error) {
	var body Reward
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReward overwrites any union data inside the Setting_Reward as the provided Reward
func (t *Setting_Reward) FromReward(v Reward) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReward performs a merge with any union data inside the Setting_Reward, using the provided Reward
func (t *Setting_Reward) MergeReward(v Reward) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Setting_Reward) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Setting_Reward) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStatistics returns the union data inside the War_Statistics as a Statistics
func (t War_Statistics) AsStatistics() (Statistics, error) {
	var body Statistics
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStatistics overwrites any union data inside the War_Statistics as the provided Statistics
func (t *War_Statistics) FromStatistics(v Statistics) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStatistics performs a merge with any union data inside the War_Statistics, using the provided Statistics
func (t *War_Statistics) MergeStatistics(v Statistics) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t War_Statistics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *War_Statistics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGalaxyStats returns the union data inside the WarSummary_GalaxyStats as a GalaxyStats
func (t WarSummary_GalaxyStats) AsGalaxyStats() (GalaxyStats, error) {
	var body GalaxyStats
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGalaxyStats overwrites any union data inside the WarSummary_GalaxyStats as the provided GalaxyStats
func (t *WarSummary_GalaxyStats) FromGalaxyStats(v GalaxyStats) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGalaxyStats performs a merge with any union data inside the WarSummary_GalaxyStats, using the provided GalaxyStats
func (t *WarSummary_GalaxyStats) MergeGalaxyStats(v GalaxyStats) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WarSummary_GalaxyStats) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *WarSummary_GalaxyStats) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1AssignmentsAll request
	GetApiV1AssignmentsAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Assignments request
	GetApiV1Assignments(ctx context.Context, index int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1CampaignsAll request
	GetApiV1CampaignsAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Campaigns request
	GetApiV1Campaigns(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1DispatchesAll request
	GetApiV1DispatchesAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Dispatches request
	GetApiV1Dispatches(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PlanetEvents request
	GetApiV1PlanetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1PlanetsAll request
	GetApiV1PlanetsAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Planets request
	GetApiV1Planets(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Steam request
	GetApiV1Steam(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Steam2 request
	GetApiV1Steam2(ctx context.Context, gid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1War request
	GetApiV1War(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRawApiNewsFeed801 request
	GetRawApiNewsFeed801(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRawApiStatsWar801Summary request
	GetRawApiStatsWar801Summary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRawApiWarSeason801Status request
	GetRawApiWarSeason801Status(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRawApiWarSeason801WarInfo request
	GetRawApiWarSeason801WarInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRawApiWarSeasonCurrentWarID request
	GetRawApiWarSeasonCurrentWarID(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRawApiV2AssignmentWar801 request
	GetRawApiV2AssignmentWar801(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1AssignmentsAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AssignmentsAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Assignments(ctx context.Context, index int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AssignmentsRequest(c.Server, index)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1CampaignsAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CampaignsAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Campaigns(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1CampaignsRequest(c.Server, index)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1DispatchesAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DispatchesAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Dispatches(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1DispatchesRequest(c.Server, index)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PlanetEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PlanetEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1PlanetsAll(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PlanetsAllRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Planets(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1PlanetsRequest(c.Server, index)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Steam(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SteamRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Steam2(ctx context.Context, gid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1Steam2Request(c.Server, gid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1War(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WarRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRawApiNewsFeed801(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRawApiNewsFeed801Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRawApiStatsWar801Summary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRawApiStatsWar801SummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRawApiWarSeason801Status(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRawApiWarSeason801StatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRawApiWarSeason801WarInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRawApiWarSeason801WarInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRawApiWarSeasonCurrentWarID(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRawApiWarSeasonCurrentWarIDRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRawApiV2AssignmentWar801(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRawApiV2AssignmentWar801Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AssignmentsAllRequest generates requests for GetApiV1AssignmentsAll
func NewGetApiV1AssignmentsAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/assignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1AssignmentsRequest generates requests for GetApiV1Assignments
func NewGetApiV1AssignmentsRequest(server string, index int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/assignments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CampaignsAllRequest generates requests for GetApiV1CampaignsAll
func NewGetApiV1CampaignsAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/campaigns")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1CampaignsRequest generates requests for GetApiV1Campaigns
func NewGetApiV1CampaignsRequest(server string, index int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/campaigns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DispatchesAllRequest generates requests for GetApiV1DispatchesAll
func NewGetApiV1DispatchesAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dispatches")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1DispatchesRequest generates requests for GetApiV1Dispatches
func NewGetApiV1DispatchesRequest(server string, index int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dispatches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PlanetEventsRequest generates requests for GetApiV1PlanetEvents
func NewGetApiV1PlanetEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/planet-events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PlanetsAllRequest generates requests for GetApiV1PlanetsAll
func NewGetApiV1PlanetsAllRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/planets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1PlanetsRequest generates requests for GetApiV1Planets
func NewGetApiV1PlanetsRequest(server string, index int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "index", runtime.ParamLocationPath, index)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/planets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1SteamRequest generates requests for GetApiV1Steam
func NewGetApiV1SteamRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/steam")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1Steam2Request generates requests for GetApiV1Steam2
func NewGetApiV1Steam2Request(server string, gid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gid", runtime.ParamLocationPath, gid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/steam/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1WarRequest generates requests for GetApiV1War
func NewGetApiV1WarRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/war")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRawApiNewsFeed801Request generates requests for GetRawApiNewsFeed801
func NewGetRawApiNewsFeed801Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/raw/api/NewsFeed/801")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRawApiStatsWar801SummaryRequest generates requests for GetRawApiStatsWar801Summary
func NewGetRawApiStatsWar801SummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/raw/api/Stats/war/801/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRawApiWarSeason801StatusRequest generates requests for GetRawApiWarSeason801Status
func NewGetRawApiWarSeason801StatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/raw/api/WarSeason/801/Status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRawApiWarSeason801WarInfoRequest generates requests for GetRawApiWarSeason801WarInfo
func NewGetRawApiWarSeason801WarInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/raw/api/WarSeason/801/WarInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRawApiWarSeasonCurrentWarIDRequest generates requests for GetRawApiWarSeasonCurrentWarID
func NewGetRawApiWarSeasonCurrentWarIDRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/raw/api/WarSeason/current/WarID")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRawApiV2AssignmentWar801Request generates requests for GetRawApiV2AssignmentWar801
func NewGetRawApiV2AssignmentWar801Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/raw/api/v2/Assignment/War/801")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetApiV1AssignmentsAllWithResponse request
	GetApiV1AssignmentsAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AssignmentsAllResponse, error)

	// GetApiV1AssignmentsWithResponse request
	GetApiV1AssignmentsWithResponse(ctx context.Context, index int64, reqEditors ...RequestEditorFn) (*GetApiV1AssignmentsResponse, error)

	// GetApiV1CampaignsAllWithResponse request
	GetApiV1CampaignsAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CampaignsAllResponse, error)

	// GetApiV1CampaignsWithResponse request
	GetApiV1CampaignsWithResponse(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*GetApiV1CampaignsResponse, error)

	// GetApiV1DispatchesAllWithResponse request
	GetApiV1DispatchesAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DispatchesAllResponse, error)

	// GetApiV1DispatchesWithResponse request
	GetApiV1DispatchesWithResponse(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*GetApiV1DispatchesResponse, error)

	// GetApiV1PlanetEventsWithResponse request
	GetApiV1PlanetEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1PlanetEventsResponse, error)

	// GetApiV1PlanetsAllWithResponse request
	GetApiV1PlanetsAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1PlanetsAllResponse, error)

	// GetApiV1PlanetsWithResponse request
	GetApiV1PlanetsWithResponse(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*GetApiV1PlanetsResponse, error)

	// GetApiV1SteamWithResponse request
	GetApiV1SteamWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SteamResponse, error)

	// GetApiV1Steam2WithResponse request
	GetApiV1Steam2WithResponse(ctx context.Context, gid string, reqEditors ...RequestEditorFn) (*GetApiV1Steam2Response, error)

	// GetApiV1WarWithResponse request
	GetApiV1WarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1WarResponse, error)

	// GetRawApiNewsFeed801WithResponse request
	GetRawApiNewsFeed801WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiNewsFeed801Response, error)

	// GetRawApiStatsWar801SummaryWithResponse request
	GetRawApiStatsWar801SummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiStatsWar801SummaryResponse, error)

	// GetRawApiWarSeason801StatusWithResponse request
	GetRawApiWarSeason801StatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiWarSeason801StatusResponse, error)

	// GetRawApiWarSeason801WarInfoWithResponse request
	GetRawApiWarSeason801WarInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiWarSeason801WarInfoResponse, error)

	// GetRawApiWarSeasonCurrentWarIDWithResponse request
	GetRawApiWarSeasonCurrentWarIDWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiWarSeasonCurrentWarIDResponse, error)

	// GetRawApiV2AssignmentWar801WithResponse request
	GetRawApiV2AssignmentWar801WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiV2AssignmentWar801Response, error)
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AssignmentsAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Assignment2
}

// Status returns HTTPResponse.Status
func (r GetApiV1AssignmentsAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AssignmentsAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1AssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Assignment2
}

// Status returns HTTPResponse.Status
func (r GetApiV1AssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CampaignsAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Campaign2
}

// Status returns HTTPResponse.Status
func (r GetApiV1CampaignsAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CampaignsAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1CampaignsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Campaign2
}

// Status returns HTTPResponse.Status
func (r GetApiV1CampaignsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1CampaignsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DispatchesAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Dispatch
}

// Status returns HTTPResponse.Status
func (r GetApiV1DispatchesAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DispatchesAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1DispatchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Dispatch
}

// Status returns HTTPResponse.Status
func (r GetApiV1DispatchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1DispatchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PlanetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Planet
}

// Status returns HTTPResponse.Status
func (r GetApiV1PlanetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PlanetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PlanetsAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Planet
}

// Status returns HTTPResponse.Status
func (r GetApiV1PlanetsAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PlanetsAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1PlanetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Planet
}

// Status returns HTTPResponse.Status
func (r GetApiV1PlanetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1PlanetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SteamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SteamNews
}

// Status returns HTTPResponse.Status
func (r GetApiV1SteamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SteamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1Steam2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SteamNews
}

// Status returns HTTPResponse.Status
func (r GetApiV1Steam2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1Steam2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *War
}

// Status returns HTTPResponse.Status
func (r GetApiV1WarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRawApiNewsFeed801Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsFeedItem
}

// Status returns HTTPResponse.Status
func (r GetRawApiNewsFeed801Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRawApiNewsFeed801Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRawApiStatsWar801SummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarSummary
}

// Status returns HTTPResponse.Status
func (r GetRawApiStatsWar801SummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRawApiStatsWar801SummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRawApiWarSeason801StatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarStatus
}

// Status returns HTTPResponse.Status
func (r GetRawApiWarSeason801StatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRawApiWarSeason801StatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRawApiWarSeason801WarInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarInfo
}

// Status returns HTTPResponse.Status
func (r GetRawApiWarSeason801WarInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRawApiWarSeason801WarInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRawApiWarSeasonCurrentWarIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarId
}

// Status returns HTTPResponse.Status
func (r GetRawApiWarSeasonCurrentWarIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRawApiWarSeasonCurrentWarIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRawApiV2AssignmentWar801Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Assignment
}

// Status returns HTTPResponse.Status
func (r GetRawApiV2AssignmentWar801Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRawApiV2AssignmentWar801Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetApiV1AssignmentsAllWithResponse request returning *GetApiV1AssignmentsAllResponse
func (c *ClientWithResponses) GetApiV1AssignmentsAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AssignmentsAllResponse, error) {
	rsp, err := c.GetApiV1AssignmentsAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AssignmentsAllResponse(rsp)
}

// GetApiV1AssignmentsWithResponse request returning *GetApiV1AssignmentsResponse
func (c *ClientWithResponses) GetApiV1AssignmentsWithResponse(ctx context.Context, index int64, reqEditors ...RequestEditorFn) (*GetApiV1AssignmentsResponse, error) {
	rsp, err := c.GetApiV1Assignments(ctx, index, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AssignmentsResponse(rsp)
}

// GetApiV1CampaignsAllWithResponse request returning *GetApiV1CampaignsAllResponse
func (c *ClientWithResponses) GetApiV1CampaignsAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1CampaignsAllResponse, error) {
	rsp, err := c.GetApiV1CampaignsAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CampaignsAllResponse(rsp)
}

// GetApiV1CampaignsWithResponse request returning *GetApiV1CampaignsResponse
func (c *ClientWithResponses) GetApiV1CampaignsWithResponse(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*GetApiV1CampaignsResponse, error) {
	rsp, err := c.GetApiV1Campaigns(ctx, index, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1CampaignsResponse(rsp)
}

// GetApiV1DispatchesAllWithResponse request returning *GetApiV1DispatchesAllResponse
func (c *ClientWithResponses) GetApiV1DispatchesAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1DispatchesAllResponse, error) {
	rsp, err := c.GetApiV1DispatchesAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DispatchesAllResponse(rsp)
}

// GetApiV1DispatchesWithResponse request returning *GetApiV1DispatchesResponse
func (c *ClientWithResponses) GetApiV1DispatchesWithResponse(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*GetApiV1DispatchesResponse, error) {
	rsp, err := c.GetApiV1Dispatches(ctx, index, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1DispatchesResponse(rsp)
}

// GetApiV1PlanetEventsWithResponse request returning *GetApiV1PlanetEventsResponse
func (c *ClientWithResponses) GetApiV1PlanetEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1PlanetEventsResponse, error) {
	rsp, err := c.GetApiV1PlanetEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PlanetEventsResponse(rsp)
}

// GetApiV1PlanetsAllWithResponse request returning *GetApiV1PlanetsAllResponse
func (c *ClientWithResponses) GetApiV1PlanetsAllWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1PlanetsAllResponse, error) {
	rsp, err := c.GetApiV1PlanetsAll(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PlanetsAllResponse(rsp)
}

// GetApiV1PlanetsWithResponse request returning *GetApiV1PlanetsResponse
func (c *ClientWithResponses) GetApiV1PlanetsWithResponse(ctx context.Context, index int32, reqEditors ...RequestEditorFn) (*GetApiV1PlanetsResponse, error) {
	rsp, err := c.GetApiV1Planets(ctx, index, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1PlanetsResponse(rsp)
}

// GetApiV1SteamWithResponse request returning *GetApiV1SteamResponse
func (c *ClientWithResponses) GetApiV1SteamWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SteamResponse, error) {
	rsp, err := c.GetApiV1Steam(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SteamResponse(rsp)
}

// GetApiV1Steam2WithResponse request returning *GetApiV1Steam2Response
func (c *ClientWithResponses) GetApiV1Steam2WithResponse(ctx context.Context, gid string, reqEditors ...RequestEditorFn) (*GetApiV1Steam2Response, error) {
	rsp, err := c.GetApiV1Steam2(ctx, gid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1Steam2Response(rsp)
}

// GetApiV1WarWithResponse request returning *GetApiV1WarResponse
func (c *ClientWithResponses) GetApiV1WarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1WarResponse, error) {
	rsp, err := c.GetApiV1War(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WarResponse(rsp)
}

// GetRawApiNewsFeed801WithResponse request returning *GetRawApiNewsFeed801Response
func (c *ClientWithResponses) GetRawApiNewsFeed801WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiNewsFeed801Response, error) {
	rsp, err := c.GetRawApiNewsFeed801(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRawApiNewsFeed801Response(rsp)
}

// GetRawApiStatsWar801SummaryWithResponse request returning *GetRawApiStatsWar801SummaryResponse
func (c *ClientWithResponses) GetRawApiStatsWar801SummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiStatsWar801SummaryResponse, error) {
	rsp, err := c.GetRawApiStatsWar801Summary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRawApiStatsWar801SummaryResponse(rsp)
}

// GetRawApiWarSeason801StatusWithResponse request returning *GetRawApiWarSeason801StatusResponse
func (c *ClientWithResponses) GetRawApiWarSeason801StatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiWarSeason801StatusResponse, error) {
	rsp, err := c.GetRawApiWarSeason801Status(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRawApiWarSeason801StatusResponse(rsp)
}

// GetRawApiWarSeason801WarInfoWithResponse request returning *GetRawApiWarSeason801WarInfoResponse
func (c *ClientWithResponses) GetRawApiWarSeason801WarInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiWarSeason801WarInfoResponse, error) {
	rsp, err := c.GetRawApiWarSeason801WarInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRawApiWarSeason801WarInfoResponse(rsp)
}

// GetRawApiWarSeasonCurrentWarIDWithResponse request returning *GetRawApiWarSeasonCurrentWarIDResponse
func (c *ClientWithResponses) GetRawApiWarSeasonCurrentWarIDWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiWarSeasonCurrentWarIDResponse, error) {
	rsp, err := c.GetRawApiWarSeasonCurrentWarID(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRawApiWarSeasonCurrentWarIDResponse(rsp)
}

// GetRawApiV2AssignmentWar801WithResponse request returning *GetRawApiV2AssignmentWar801Response
func (c *ClientWithResponses) GetRawApiV2AssignmentWar801WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRawApiV2AssignmentWar801Response, error) {
	rsp, err := c.GetRawApiV2AssignmentWar801(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRawApiV2AssignmentWar801Response(rsp)
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AssignmentsAllResponse parses an HTTP response from a GetApiV1AssignmentsAllWithResponse call
func ParseGetApiV1AssignmentsAllResponse(rsp *http.Response) (*GetApiV1AssignmentsAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AssignmentsAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Assignment2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1AssignmentsResponse parses an HTTP response from a GetApiV1AssignmentsWithResponse call
func ParseGetApiV1AssignmentsResponse(rsp *http.Response) (*GetApiV1AssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Assignment2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1CampaignsAllResponse parses an HTTP response from a GetApiV1CampaignsAllWithResponse call
func ParseGetApiV1CampaignsAllResponse(rsp *http.Response) (*GetApiV1CampaignsAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CampaignsAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Campaign2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1CampaignsResponse parses an HTTP response from a GetApiV1CampaignsWithResponse call
func ParseGetApiV1CampaignsResponse(rsp *http.Response) (*GetApiV1CampaignsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1CampaignsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Campaign2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1DispatchesAllResponse parses an HTTP response from a GetApiV1DispatchesAllWithResponse call
func ParseGetApiV1DispatchesAllResponse(rsp *http.Response) (*GetApiV1DispatchesAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DispatchesAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Dispatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1DispatchesResponse parses an HTTP response from a GetApiV1DispatchesWithResponse call
func ParseGetApiV1DispatchesResponse(rsp *http.Response) (*GetApiV1DispatchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1DispatchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Dispatch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1PlanetEventsResponse parses an HTTP response from a GetApiV1PlanetEventsWithResponse call
func ParseGetApiV1PlanetEventsResponse(rsp *http.Response) (*GetApiV1PlanetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PlanetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Planet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1PlanetsAllResponse parses an HTTP response from a GetApiV1PlanetsAllWithResponse call
func ParseGetApiV1PlanetsAllResponse(rsp *http.Response) (*GetApiV1PlanetsAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PlanetsAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Planet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1PlanetsResponse parses an HTTP response from a GetApiV1PlanetsWithResponse call
func ParseGetApiV1PlanetsResponse(rsp *http.Response) (*GetApiV1PlanetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1PlanetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Planet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1SteamResponse parses an HTTP response from a GetApiV1SteamWithResponse call
func ParseGetApiV1SteamResponse(rsp *http.Response) (*GetApiV1SteamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SteamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SteamNews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1Steam2Response parses an HTTP response from a GetApiV1Steam2WithResponse call
func ParseGetApiV1Steam2Response(rsp *http.Response) (*GetApiV1Steam2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1Steam2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SteamNews
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1WarResponse parses an HTTP response from a GetApiV1WarWithResponse call
func ParseGetApiV1WarResponse(rsp *http.Response) (*GetApiV1WarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest War
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRawApiNewsFeed801Response parses an HTTP response from a GetRawApiNewsFeed801WithResponse call
func ParseGetRawApiNewsFeed801Response(rsp *http.Response) (*GetRawApiNewsFeed801Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRawApiNewsFeed801Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsFeedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRawApiStatsWar801SummaryResponse parses an HTTP response from a GetRawApiStatsWar801SummaryWithResponse call
func ParseGetRawApiStatsWar801SummaryResponse(rsp *http.Response) (*GetRawApiStatsWar801SummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRawApiStatsWar801SummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRawApiWarSeason801StatusResponse parses an HTTP response from a GetRawApiWarSeason801StatusWithResponse call
func ParseGetRawApiWarSeason801StatusResponse(rsp *http.Response) (*GetRawApiWarSeason801StatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRawApiWarSeason801StatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRawApiWarSeason801WarInfoResponse parses an HTTP response from a GetRawApiWarSeason801WarInfoWithResponse call
func ParseGetRawApiWarSeason801WarInfoResponse(rsp *http.Response) (*GetRawApiWarSeason801WarInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRawApiWarSeason801WarInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRawApiWarSeasonCurrentWarIDResponse parses an HTTP response from a GetRawApiWarSeasonCurrentWarIDWithResponse call
func ParseGetRawApiWarSeasonCurrentWarIDResponse(rsp *http.Response) (*GetRawApiWarSeasonCurrentWarIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRawApiWarSeasonCurrentWarIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRawApiV2AssignmentWar801Response parses an HTTP response from a GetRawApiV2AssignmentWar801WithResponse call
func ParseGetRawApiV2AssignmentWar801Response(rsp *http.Response) (*GetRawApiV2AssignmentWar801Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRawApiV2AssignmentWar801Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Assignment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
