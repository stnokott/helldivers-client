// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for GlobalEventSchemaTitle.
const (
	BRIEFING GlobalEventSchemaTitle = "BRIEFING"
	FAILED   GlobalEventSchemaTitle = "FAILED"
	SUCCESS  GlobalEventSchemaTitle = "SUCCESS"
)

// CampaignSchema Contains information about a currently active campaign
type CampaignSchema struct {
	// Count not sure what this counts, it's generally a low number
	Count *int `json:"count,omitempty"`

	// Id The identifier of this campaign
	Id *int `json:"id,omitempty"`

	// Planet Represents a planet in the galactic war that must receive Managed democracy
	Planet *PlanetSchema `json:"planet,omitempty"`

	// Type The type of this campaign, haven't found out what they mean yet
	Type *int `json:"type,omitempty"`
}

// GlobalEventSchema Contains information about a global event, past and present
type GlobalEventSchema struct {
	// AssignmentId32 Internal identifier, haven't figured this out
	AssignmentId32 *float32 `json:"assignment_id_32,omitempty"`

	// Effects A list of effects, usually strategems or bonuses
	Effects *[]string `json:"effects,omitempty"`

	// Flag The identifier of the flag for this campaign (flags haven't been mapped)
	Flag *int `json:"flag,omitempty"`

	// Id The identifier of this campaign
	Id *int `json:"id,omitempty"`

	// Id32 Internal identifier of this campaign, stable
	Id32    *float32 `json:"id_32,omitempty"`
	Message *struct {
		// De The message from Super Earth about the global event in de-DE
		De *string `json:"de,omitempty"`

		// En The message from Super Earth about the global event in en-US
		En *string `json:"en,omitempty"`

		// Es The message from Super Earth about the global event in es-ES
		Es *string `json:"es,omitempty"`

		// Fr The message from Super Earth about the global event in fr-FR
		Fr *string `json:"fr,omitempty"`

		// It The message from Super Earth about the global event in it-IT
		It *string `json:"it,omitempty"`

		// Pl The message from Super Earth about the global event in pl-PL
		Pl *string `json:"pl,omitempty"`

		// Ru The message from Super Earth about the global event in ru-RU
		Ru *string `json:"ru,omitempty"`

		// Zh The message from Super Earth about the global event in zh-Hans
		Zh *string `json:"zh,omitempty"`
	} `json:"message,omitempty"`

	// MessageId32 Internal identifier of the message, this always remains the same regardless of language
	MessageId32 *float32        `json:"message_id_32,omitempty"`
	Planets     *[]PlanetSchema `json:"planets,omitempty"`

	// PortraitId32 I suspect identifier of an in game image
	PortraitId32 *float32 `json:"portrait_id_32,omitempty"`

	// Race The race involved in this campaign (so far seems to always be 'Human')
	Race *string `json:"race,omitempty"`

	// Title The title of the global event, appears to be more a status than an actual title
	Title *GlobalEventSchemaTitle `json:"title,omitempty"`

	// Title32 Internal identifier of the title, this always remains the same regardless of language
	Title32 *float32 `json:"title_32,omitempty"`
}

// GlobalEventSchemaTitle The title of the global event, appears to be more a status than an actual title
type GlobalEventSchemaTitle string

// HomeWorldSchema Homeworld information of a given faction
type HomeWorldSchema struct {
	// Planets The planets this race considers it's homeworlds
	Planets *[]PlanetSchema `json:"planets,omitempty"`

	// Race The race that the planet is the homeworld of
	Race *string `json:"race,omitempty"`
}

// JointOperationSchema Contains information about a currently joint operation
type JointOperationSchema struct {
	// HqNodeIndex Haven't figured out what exactly this means
	HqNodeIndex *int `json:"hq_node_index,omitempty"`

	// Id The identifier of this campaign
	Id *int `json:"id,omitempty"`

	// Planet Represents a planet in the galactic war that must receive Managed democracy
	Planet *PlanetSchema `json:"planet,omitempty"`
}

// JsonErrorResponse defines model for JsonErrorResponse.
type JsonErrorResponse struct {
	Errors []struct {
		Detail string `json:"detail"`
		Source struct {
			Pointer string `json:"pointer"`
		} `json:"source"`
		Title string `json:"title"`
	} `json:"errors"`
}

// NewsFeedMessageSchema Represents a message in the Helldivers 2 newsfeed
type NewsFeedMessageSchema struct {
	// Id The identifier of this campaign
	Id      *int `json:"id,omitempty"`
	Message *struct {
		// De The message from Super Earth about the news in de-DE
		De *string `json:"de,omitempty"`

		// En The message from Super Earth about the news in en-US
		En *string `json:"en,omitempty"`

		// Es The message from Super Earth about the news in es-ES
		Es *string `json:"es,omitempty"`

		// Fr The message from Super Earth about the news in fr-FR
		Fr *string `json:"fr,omitempty"`

		// It The message from Super Earth about the news in it-IT
		It *string `json:"it,omitempty"`

		// Pl The message from Super Earth about the news in pl-PL
		Pl *string `json:"pl,omitempty"`

		// Ru The message from Super Earth about the news in ru-RU
		Ru *string `json:"ru,omitempty"`

		// Zh The message from Super Earth about the news in zh-Hans
		Zh *string `json:"zh,omitempty"`
	} `json:"message,omitempty"`

	// Published When this message was published
	Published *time.Time `json:"published,omitempty"`
	TagIds    *[]int     `json:"tag_ids,omitempty"`

	// Type A type identifier, haven't figured out what they mean (seems to be 0 mostly)
	Type *int `json:"type,omitempty"`
}

// NotFoundSchema The resource you tried to retrieve could not be found
type NotFoundSchema struct {
	Errors *struct {
		// Detail Description of what went wrong
		Detail *string `json:"detail,omitempty"`
	} `json:"errors,omitempty"`
}

// PlanetEventSchema An event occuring on a specific planet for a limited time
type PlanetEventSchema struct {
	// Campaign Contains information about a currently active campaign
	Campaign *CampaignSchema `json:"campaign,omitempty"`

	// EventType Identifier of the type of event, haven't found an index for these yet
	EventType *int `json:"event_type,omitempty"`

	// ExpireTime When the event will end on this planet
	ExpireTime *time.Time `json:"expire_time,omitempty"`

	// Health The current health of the planet in this event
	Health *int `json:"health,omitempty"`

	// Id The identifier of this event
	Id              *int                    `json:"id,omitempty"`
	JointOperations *[]JointOperationSchema `json:"joint_operations,omitempty"`

	// MaxHealth The max health pool of the planet in this event
	MaxHealth *int `json:"max_health,omitempty"`

	// Planet Represents a planet in the galactic war that must receive Managed democracy
	Planet *PlanetSchema `json:"planet,omitempty"`

	// Race The race active in this event
	Race *string `json:"race,omitempty"`

	// StartTime When the event started on this planet
	StartTime *time.Time `json:"start_time,omitempty"`
}

// PlanetSchema Represents a planet in the galactic war that must receive Managed democracy
type PlanetSchema struct {
	// Disabled Whether or not this planet is currently playable (enabled)
	Disabled *bool `json:"disabled,omitempty"`

	// Hash A hash retrieved from the official API, purpose unknown
	Hash *float32 `json:"hash,omitempty"`

	// Index The index of this planet, for convenience kept the same as in the official API
	Index *int `json:"index,omitempty"`

	// InitialOwner Which faction originally claimed this planet
	InitialOwner *string `json:"initial_owner,omitempty"`

	// MaxHealth The maximum health of this planet, used in conflict stats
	MaxHealth *int `json:"max_health,omitempty"`

	// Name The human readable name of the planet, or unknown if it's not a known name
	Name *string `json:"name,omitempty"`

	// Position The coordinates in the galaxy where this planet is located
	Position *struct {
		// X X coordinate
		X *float32 `json:"x,omitempty"`

		// Y Y coordinate
		Y *float32 `json:"y,omitempty"`
	} `json:"position,omitempty"`

	// Sector The name of the sector this planet resides in (or the identifier as a string if it's not a known sector)
	Sector *string `json:"sector,omitempty"`

	// Waypoints Waypoints, seems to link planets together but purpose unclear
	Waypoints *[]int `json:"waypoints,omitempty"`
}

// PlanetStatusSchema The current offense status of a planet (owner, health, regen, player count)
type PlanetStatusSchema struct {
	// Health The current 'health' of this planet
	Health *float32 `json:"health,omitempty"`

	// Liberation The progression of liberation on this planet, presented as a %
	Liberation *float32 `json:"liberation,omitempty"`

	// Owner The faction that owns the planet at this moment
	Owner *string `json:"owner,omitempty"`

	// Planet Represents a planet in the galactic war that must receive Managed democracy
	Planet *PlanetSchema `json:"planet,omitempty"`

	// Players The amount of helldivers currently on this planet
	Players *int `json:"players,omitempty"`

	// RegenPerSecond At which rate this planet will regenerate it's health
	RegenPerSecond *float32 `json:"regen_per_second,omitempty"`
}

// TooManyRequestsSchema You're making too many requests in a limited span of time
type TooManyRequestsSchema struct {
	// Error Error message for rate limit being exceeded
	Error *string `json:"error,omitempty"`
}

// WarInfoSchema Global overview of the war, it's planets, capitals etc
type WarInfoSchema struct {
	// Capitals Empty, not been mapped yet
	Capitals *[]int `json:"capitals,omitempty"`

	// EndDate When this war season is scheduled to end
	EndDate *time.Time `json:"end_date,omitempty"`

	// HomeWorlds All homeworlds present in this war season
	HomeWorlds *[]HomeWorldSchema `json:"home_worlds,omitempty"`

	// MinimumClientVersion Used by the Helldivers 2 game client
	MinimumClientVersion *string `json:"minimum_client_version,omitempty"`

	// PlanetPermanentEffects Empty, not been mapped yet
	PlanetPermanentEffects *[]int `json:"planet_permanent_effects,omitempty"`

	// Planets All planets present in this war season
	Planets *[]PlanetSchema `json:"planets,omitempty"`

	// StartDate When this war season was started
	StartDate *time.Time `json:"start_date,omitempty"`

	// WarId The identifier for this war, this ID must be passed for all resources under this war
	WarId *int `json:"war_id,omitempty"`
}

// WarSeasonOverview An overview of the available war seasons (and the current)
type WarSeasonOverview struct {
	// Current The currently active war season
	Current *string   `json:"current,omitempty"`
	Seasons *[]string `json:"seasons,omitempty"`
}

// WarStatusSchema Current status of the Helldivers offensive in the galactic war
type WarStatusSchema struct {
	// ActiveElectionPolicyEffects Always empty AFAIK, haven't figured this out
	ActiveElectionPolicyEffects *[]int `json:"active_election_policy_effects,omitempty"`

	// Campaigns An overview of the campaigns active in the current offensive
	Campaigns *[]CampaignSchema `json:"campaigns,omitempty"`

	// CommunityTargets Always empty AFAIK, haven't figured this out
	CommunityTargets *[]int               `json:"community_targets,omitempty"`
	GlobalEvents     *[]GlobalEventSchema `json:"global_events,omitempty"`

	// ImpactMultiplier I don't fully understand what this does, feel free to ping me if you know
	ImpactMultiplier *float32                `json:"impact_multiplier,omitempty"`
	JointOperations  *[]JointOperationSchema `json:"joint_operations,omitempty"`

	// PlanetActiveEffects Always empty AFAIK, haven't figured this out
	PlanetActiveEffects *[]int `json:"planet_active_effects,omitempty"`

	// PlanetAttacks An overview of attacks currently being carried out against Democracy
	PlanetAttacks *[]struct {
		// Source Represents a planet in the galactic war that must receive Managed democracy
		Source *PlanetSchema `json:"source,omitempty"`

		// Target Represents a planet in the galactic war that must receive Managed democracy
		Target *PlanetSchema `json:"target,omitempty"`
	} `json:"planet_attacks,omitempty"`
	PlanetEvents *[]PlanetEventSchema  `json:"planet_events,omitempty"`
	PlanetStatus *[]PlanetStatusSchema `json:"planet_status,omitempty"`

	// SnapshotAt The timestamp (UTC) this status was snapshotted
	SnapshotAt *time.Time `json:"snapshot_at,omitempty"`

	// StartedAt The timestamp (UTC) this season was started, as returned by the Helldivers API
	StartedAt *time.Time `json:"started_at,omitempty"`

	// WarId The identifier for this war, this ID must be passed for all resources under this war
	WarId *int `json:"war_id,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Helldivers2WebApiWarSeasonControllerIndex request
	Helldivers2WebApiWarSeasonControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Helldivers2WebApiGlobalEventsControllerIndex request
	Helldivers2WebApiGlobalEventsControllerIndex(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Helldivers2WebApiGlobalEventsControllerLatest request
	Helldivers2WebApiGlobalEventsControllerLatest(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Helldivers2WebApiWarSeasonControllerNewsFeed request
	Helldivers2WebApiWarSeasonControllerNewsFeed(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Helldivers2WebApiWarSeasonControllerShowInfo request
	Helldivers2WebApiWarSeasonControllerShowInfo(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Helldivers2WebApiPlanetsControllerIndex request
	Helldivers2WebApiPlanetsControllerIndex(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Helldivers2WebApiPlanetsControllerShow request
	Helldivers2WebApiPlanetsControllerShow(ctx context.Context, warId int, planetIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Helldivers2WebApiPlanetsControllerShowPlanetStatus request
	Helldivers2WebApiPlanetsControllerShowPlanetStatus(ctx context.Context, warId int, planetIndex int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Helldivers2WebApiWarSeasonControllerShowStatus request
	Helldivers2WebApiWarSeasonControllerShowStatus(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Helldivers2WebApiWarSeasonControllerIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiWarSeasonControllerIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Helldivers2WebApiGlobalEventsControllerIndex(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiGlobalEventsControllerIndexRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Helldivers2WebApiGlobalEventsControllerLatest(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiGlobalEventsControllerLatestRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Helldivers2WebApiWarSeasonControllerNewsFeed(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiWarSeasonControllerNewsFeedRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Helldivers2WebApiWarSeasonControllerShowInfo(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiWarSeasonControllerShowInfoRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Helldivers2WebApiPlanetsControllerIndex(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiPlanetsControllerIndexRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Helldivers2WebApiPlanetsControllerShow(ctx context.Context, warId int, planetIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiPlanetsControllerShowRequest(c.Server, warId, planetIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Helldivers2WebApiPlanetsControllerShowPlanetStatus(ctx context.Context, warId int, planetIndex int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiPlanetsControllerShowPlanetStatusRequest(c.Server, warId, planetIndex)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Helldivers2WebApiWarSeasonControllerShowStatus(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHelldivers2WebApiWarSeasonControllerShowStatusRequest(c.Server, warId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewHelldivers2WebApiWarSeasonControllerIndexRequest generates requests for Helldivers2WebApiWarSeasonControllerIndex
func NewHelldivers2WebApiWarSeasonControllerIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHelldivers2WebApiGlobalEventsControllerIndexRequest generates requests for Helldivers2WebApiGlobalEventsControllerIndex
func NewHelldivers2WebApiGlobalEventsControllerIndexRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHelldivers2WebApiGlobalEventsControllerLatestRequest generates requests for Helldivers2WebApiGlobalEventsControllerLatest
func NewHelldivers2WebApiGlobalEventsControllerLatestRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/events/latest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHelldivers2WebApiWarSeasonControllerNewsFeedRequest generates requests for Helldivers2WebApiWarSeasonControllerNewsFeed
func NewHelldivers2WebApiWarSeasonControllerNewsFeedRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/feed", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHelldivers2WebApiWarSeasonControllerShowInfoRequest generates requests for Helldivers2WebApiWarSeasonControllerShowInfo
func NewHelldivers2WebApiWarSeasonControllerShowInfoRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHelldivers2WebApiPlanetsControllerIndexRequest generates requests for Helldivers2WebApiPlanetsControllerIndex
func NewHelldivers2WebApiPlanetsControllerIndexRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/planets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHelldivers2WebApiPlanetsControllerShowRequest generates requests for Helldivers2WebApiPlanetsControllerShow
func NewHelldivers2WebApiPlanetsControllerShowRequest(server string, warId int, planetIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "planet_index", runtime.ParamLocationPath, planetIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/planets/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHelldivers2WebApiPlanetsControllerShowPlanetStatusRequest generates requests for Helldivers2WebApiPlanetsControllerShowPlanetStatus
func NewHelldivers2WebApiPlanetsControllerShowPlanetStatusRequest(server string, warId int, planetIndex int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "planet_index", runtime.ParamLocationPath, planetIndex)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/planets/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHelldivers2WebApiWarSeasonControllerShowStatusRequest generates requests for Helldivers2WebApiWarSeasonControllerShowStatus
func NewHelldivers2WebApiWarSeasonControllerShowStatusRequest(server string, warId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "war_id", runtime.ParamLocationPath, warId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Helldivers2WebApiWarSeasonControllerIndexWithResponse request
	Helldivers2WebApiWarSeasonControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Helldivers2WebApiWarSeasonControllerIndexResponse, error)

	// Helldivers2WebApiGlobalEventsControllerIndexWithResponse request
	Helldivers2WebApiGlobalEventsControllerIndexWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiGlobalEventsControllerIndexResponse, error)

	// Helldivers2WebApiGlobalEventsControllerLatestWithResponse request
	Helldivers2WebApiGlobalEventsControllerLatestWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiGlobalEventsControllerLatestResponse, error)

	// Helldivers2WebApiWarSeasonControllerNewsFeedWithResponse request
	Helldivers2WebApiWarSeasonControllerNewsFeedWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiWarSeasonControllerNewsFeedResponse, error)

	// Helldivers2WebApiWarSeasonControllerShowInfoWithResponse request
	Helldivers2WebApiWarSeasonControllerShowInfoWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiWarSeasonControllerShowInfoResponse, error)

	// Helldivers2WebApiPlanetsControllerIndexWithResponse request
	Helldivers2WebApiPlanetsControllerIndexWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiPlanetsControllerIndexResponse, error)

	// Helldivers2WebApiPlanetsControllerShowWithResponse request
	Helldivers2WebApiPlanetsControllerShowWithResponse(ctx context.Context, warId int, planetIndex int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiPlanetsControllerShowResponse, error)

	// Helldivers2WebApiPlanetsControllerShowPlanetStatusWithResponse request
	Helldivers2WebApiPlanetsControllerShowPlanetStatusWithResponse(ctx context.Context, warId int, planetIndex int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiPlanetsControllerShowPlanetStatusResponse, error)

	// Helldivers2WebApiWarSeasonControllerShowStatusWithResponse request
	Helldivers2WebApiWarSeasonControllerShowStatusWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiWarSeasonControllerShowStatusResponse, error)
}

type Helldivers2WebApiWarSeasonControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarSeasonOverview
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiWarSeasonControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiWarSeasonControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Helldivers2WebApiGlobalEventsControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GlobalEventSchema
	JSON404      *NotFoundSchema
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiGlobalEventsControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiGlobalEventsControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Helldivers2WebApiGlobalEventsControllerLatestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalEventSchema
	JSON404      *NotFoundSchema
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiGlobalEventsControllerLatestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiGlobalEventsControllerLatestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Helldivers2WebApiWarSeasonControllerNewsFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsFeedMessageSchema
	JSON404      *NotFoundSchema
	JSON422      *JsonErrorResponse
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiWarSeasonControllerNewsFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiWarSeasonControllerNewsFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Helldivers2WebApiWarSeasonControllerShowInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarInfoSchema
	JSON404      *NotFoundSchema
	JSON422      *JsonErrorResponse
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiWarSeasonControllerShowInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiWarSeasonControllerShowInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Helldivers2WebApiPlanetsControllerIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PlanetSchema
	JSON404      *NotFoundSchema
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiPlanetsControllerIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiPlanetsControllerIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Helldivers2WebApiPlanetsControllerShowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlanetSchema
	JSON404      *NotFoundSchema
	JSON422      *JsonErrorResponse
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiPlanetsControllerShowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiPlanetsControllerShowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Helldivers2WebApiPlanetsControllerShowPlanetStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlanetStatusSchema
	JSON404      *NotFoundSchema
	JSON422      *JsonErrorResponse
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiPlanetsControllerShowPlanetStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiPlanetsControllerShowPlanetStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Helldivers2WebApiWarSeasonControllerShowStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WarStatusSchema
	JSON404      *NotFoundSchema
	JSON422      *JsonErrorResponse
	JSON429      *TooManyRequestsSchema
}

// Status returns HTTPResponse.Status
func (r Helldivers2WebApiWarSeasonControllerShowStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Helldivers2WebApiWarSeasonControllerShowStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// Helldivers2WebApiWarSeasonControllerIndexWithResponse request returning *Helldivers2WebApiWarSeasonControllerIndexResponse
func (c *ClientWithResponses) Helldivers2WebApiWarSeasonControllerIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Helldivers2WebApiWarSeasonControllerIndexResponse, error) {
	rsp, err := c.Helldivers2WebApiWarSeasonControllerIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiWarSeasonControllerIndexResponse(rsp)
}

// Helldivers2WebApiGlobalEventsControllerIndexWithResponse request returning *Helldivers2WebApiGlobalEventsControllerIndexResponse
func (c *ClientWithResponses) Helldivers2WebApiGlobalEventsControllerIndexWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiGlobalEventsControllerIndexResponse, error) {
	rsp, err := c.Helldivers2WebApiGlobalEventsControllerIndex(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiGlobalEventsControllerIndexResponse(rsp)
}

// Helldivers2WebApiGlobalEventsControllerLatestWithResponse request returning *Helldivers2WebApiGlobalEventsControllerLatestResponse
func (c *ClientWithResponses) Helldivers2WebApiGlobalEventsControllerLatestWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiGlobalEventsControllerLatestResponse, error) {
	rsp, err := c.Helldivers2WebApiGlobalEventsControllerLatest(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiGlobalEventsControllerLatestResponse(rsp)
}

// Helldivers2WebApiWarSeasonControllerNewsFeedWithResponse request returning *Helldivers2WebApiWarSeasonControllerNewsFeedResponse
func (c *ClientWithResponses) Helldivers2WebApiWarSeasonControllerNewsFeedWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiWarSeasonControllerNewsFeedResponse, error) {
	rsp, err := c.Helldivers2WebApiWarSeasonControllerNewsFeed(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiWarSeasonControllerNewsFeedResponse(rsp)
}

// Helldivers2WebApiWarSeasonControllerShowInfoWithResponse request returning *Helldivers2WebApiWarSeasonControllerShowInfoResponse
func (c *ClientWithResponses) Helldivers2WebApiWarSeasonControllerShowInfoWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiWarSeasonControllerShowInfoResponse, error) {
	rsp, err := c.Helldivers2WebApiWarSeasonControllerShowInfo(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiWarSeasonControllerShowInfoResponse(rsp)
}

// Helldivers2WebApiPlanetsControllerIndexWithResponse request returning *Helldivers2WebApiPlanetsControllerIndexResponse
func (c *ClientWithResponses) Helldivers2WebApiPlanetsControllerIndexWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiPlanetsControllerIndexResponse, error) {
	rsp, err := c.Helldivers2WebApiPlanetsControllerIndex(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiPlanetsControllerIndexResponse(rsp)
}

// Helldivers2WebApiPlanetsControllerShowWithResponse request returning *Helldivers2WebApiPlanetsControllerShowResponse
func (c *ClientWithResponses) Helldivers2WebApiPlanetsControllerShowWithResponse(ctx context.Context, warId int, planetIndex int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiPlanetsControllerShowResponse, error) {
	rsp, err := c.Helldivers2WebApiPlanetsControllerShow(ctx, warId, planetIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiPlanetsControllerShowResponse(rsp)
}

// Helldivers2WebApiPlanetsControllerShowPlanetStatusWithResponse request returning *Helldivers2WebApiPlanetsControllerShowPlanetStatusResponse
func (c *ClientWithResponses) Helldivers2WebApiPlanetsControllerShowPlanetStatusWithResponse(ctx context.Context, warId int, planetIndex int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiPlanetsControllerShowPlanetStatusResponse, error) {
	rsp, err := c.Helldivers2WebApiPlanetsControllerShowPlanetStatus(ctx, warId, planetIndex, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiPlanetsControllerShowPlanetStatusResponse(rsp)
}

// Helldivers2WebApiWarSeasonControllerShowStatusWithResponse request returning *Helldivers2WebApiWarSeasonControllerShowStatusResponse
func (c *ClientWithResponses) Helldivers2WebApiWarSeasonControllerShowStatusWithResponse(ctx context.Context, warId int, reqEditors ...RequestEditorFn) (*Helldivers2WebApiWarSeasonControllerShowStatusResponse, error) {
	rsp, err := c.Helldivers2WebApiWarSeasonControllerShowStatus(ctx, warId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHelldivers2WebApiWarSeasonControllerShowStatusResponse(rsp)
}

// ParseHelldivers2WebApiWarSeasonControllerIndexResponse parses an HTTP response from a Helldivers2WebApiWarSeasonControllerIndexWithResponse call
func ParseHelldivers2WebApiWarSeasonControllerIndexResponse(rsp *http.Response) (*Helldivers2WebApiWarSeasonControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiWarSeasonControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarSeasonOverview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseHelldivers2WebApiGlobalEventsControllerIndexResponse parses an HTTP response from a Helldivers2WebApiGlobalEventsControllerIndexWithResponse call
func ParseHelldivers2WebApiGlobalEventsControllerIndexResponse(rsp *http.Response) (*Helldivers2WebApiGlobalEventsControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiGlobalEventsControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GlobalEventSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseHelldivers2WebApiGlobalEventsControllerLatestResponse parses an HTTP response from a Helldivers2WebApiGlobalEventsControllerLatestWithResponse call
func ParseHelldivers2WebApiGlobalEventsControllerLatestResponse(rsp *http.Response) (*Helldivers2WebApiGlobalEventsControllerLatestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiGlobalEventsControllerLatestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalEventSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseHelldivers2WebApiWarSeasonControllerNewsFeedResponse parses an HTTP response from a Helldivers2WebApiWarSeasonControllerNewsFeedWithResponse call
func ParseHelldivers2WebApiWarSeasonControllerNewsFeedResponse(rsp *http.Response) (*Helldivers2WebApiWarSeasonControllerNewsFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiWarSeasonControllerNewsFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsFeedMessageSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest JsonErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseHelldivers2WebApiWarSeasonControllerShowInfoResponse parses an HTTP response from a Helldivers2WebApiWarSeasonControllerShowInfoWithResponse call
func ParseHelldivers2WebApiWarSeasonControllerShowInfoResponse(rsp *http.Response) (*Helldivers2WebApiWarSeasonControllerShowInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiWarSeasonControllerShowInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarInfoSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest JsonErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseHelldivers2WebApiPlanetsControllerIndexResponse parses an HTTP response from a Helldivers2WebApiPlanetsControllerIndexWithResponse call
func ParseHelldivers2WebApiPlanetsControllerIndexResponse(rsp *http.Response) (*Helldivers2WebApiPlanetsControllerIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiPlanetsControllerIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PlanetSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseHelldivers2WebApiPlanetsControllerShowResponse parses an HTTP response from a Helldivers2WebApiPlanetsControllerShowWithResponse call
func ParseHelldivers2WebApiPlanetsControllerShowResponse(rsp *http.Response) (*Helldivers2WebApiPlanetsControllerShowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiPlanetsControllerShowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanetSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest JsonErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseHelldivers2WebApiPlanetsControllerShowPlanetStatusResponse parses an HTTP response from a Helldivers2WebApiPlanetsControllerShowPlanetStatusWithResponse call
func ParseHelldivers2WebApiPlanetsControllerShowPlanetStatusResponse(rsp *http.Response) (*Helldivers2WebApiPlanetsControllerShowPlanetStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiPlanetsControllerShowPlanetStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanetStatusSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest JsonErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseHelldivers2WebApiWarSeasonControllerShowStatusResponse parses an HTTP response from a Helldivers2WebApiWarSeasonControllerShowStatusWithResponse call
func ParseHelldivers2WebApiWarSeasonControllerShowStatusResponse(rsp *http.Response) (*Helldivers2WebApiWarSeasonControllerShowStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Helldivers2WebApiWarSeasonControllerShowStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WarStatusSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest JsonErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest TooManyRequestsSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
