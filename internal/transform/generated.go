// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package transform

import (
	"fmt"
	api "github.com/stnokott/helldivers-client/internal/api"
	db "github.com/stnokott/helldivers-client/internal/db"
	gen "github.com/stnokott/helldivers-client/internal/db/gen"
	"time"
)

type ConverterImpl struct{}

func (c *ConverterImpl) ConvertAssignment(source api.Assignment2) (*db.Assignment, error) {
	return MustAssignment(c, source)
}
func (c *ConverterImpl) ConvertAssignmentSnapshot(source api.Assignment2) (gen.AssignmentSnapshot, error) {
	genAssignmentSnapshot := DefaultAssignmentSnapshot()
	xint64, err := MustInt64Ptr(source.Id)
	if err != nil {
		return genAssignmentSnapshot, fmt.Errorf("error setting field AssignmentID: %w", err)
	}
	genAssignmentSnapshot.AssignmentID = xint64
	pgtypeNumericList, err := MustNumericSlice(source.Progress)
	if err != nil {
		return genAssignmentSnapshot, fmt.Errorf("error setting field Progress: %w", err)
	}
	genAssignmentSnapshot.Progress = pgtypeNumericList
	return genAssignmentSnapshot, nil
}
func (c *ConverterImpl) ConvertAssignmentSnapshots(source []api.Assignment2) ([]gen.AssignmentSnapshot, error) {
	var genAssignmentSnapshotList []gen.AssignmentSnapshot
	if source != nil {
		genAssignmentSnapshotList = make([]gen.AssignmentSnapshot, len(source))
		for i := 0; i < len(source); i++ {
			genAssignmentSnapshot, err := c.ConvertAssignmentSnapshot(source[i])
			if err != nil {
				return nil, fmt.Errorf("error setting index %d: %w", i, err)
			}
			genAssignmentSnapshotList[i] = genAssignmentSnapshot
		}
	}
	return genAssignmentSnapshotList, nil
}
func (c *ConverterImpl) ConvertAssignmentTask(source api.Task2) (gen.AssignmentTask, error) {
	var genAssignmentTask gen.AssignmentTask
	xint32, err := MustInt32Ptr(source.Type)
	if err != nil {
		return genAssignmentTask, fmt.Errorf("error setting field TaskType: %w", err)
	}
	genAssignmentTask.TaskType = xint32
	pgtypeNumericList, err := MustNumericSlice(source.Values)
	if err != nil {
		return genAssignmentTask, fmt.Errorf("error setting field Values: %w", err)
	}
	genAssignmentTask.Values = pgtypeNumericList
	pgtypeNumericList2, err := MustNumericSlice(source.ValueTypes)
	if err != nil {
		return genAssignmentTask, fmt.Errorf("error setting field ValueTypes: %w", err)
	}
	genAssignmentTask.ValueTypes = pgtypeNumericList2
	return genAssignmentTask, nil
}
func (c *ConverterImpl) ConvertAssignmentTasks(source []api.Task2) ([]gen.AssignmentTask, error) {
	var genAssignmentTaskList []gen.AssignmentTask
	if source != nil {
		genAssignmentTaskList = make([]gen.AssignmentTask, len(source))
		for i := 0; i < len(source); i++ {
			genAssignmentTask, err := c.ConvertAssignmentTask(source[i])
			if err != nil {
				return nil, fmt.Errorf("error setting index %d: %w", i, err)
			}
			genAssignmentTaskList[i] = genAssignmentTask
		}
	}
	return genAssignmentTaskList, nil
}
func (c *ConverterImpl) ConvertCampaign(source api.Campaign2) (*db.Campaign, error) {
	var dbCampaign db.Campaign
	xint32, err := MustInt32Ptr(source.Id)
	if err != nil {
		return nil, fmt.Errorf("error setting field ID: %w", err)
	}
	dbCampaign.ID = xint32
	xint322, err := MustInt32Ptr(source.Type)
	if err != nil {
		return nil, fmt.Errorf("error setting field Type: %w", err)
	}
	dbCampaign.Type = xint322
	pgtypeNumeric, err := MustNumeric(source.Count)
	if err != nil {
		return nil, fmt.Errorf("error setting field Count: %w", err)
	}
	dbCampaign.Count = pgtypeNumeric
	return &dbCampaign, nil
}
func (c *ConverterImpl) ConvertDispatch(source api.Dispatch) (*db.Dispatch, error) {
	var dbDispatch db.Dispatch
	xint32, err := MustInt32Ptr(source.Id)
	if err != nil {
		return nil, fmt.Errorf("error setting field ID: %w", err)
	}
	dbDispatch.ID = xint32
	pgtypeTimestamp, err := MustTimestamp(source.Published)
	if err != nil {
		return nil, fmt.Errorf("error setting field CreateTime: %w", err)
	}
	dbDispatch.CreateTime = pgtypeTimestamp
	xint322, err := MustInt32Ptr(source.Type)
	if err != nil {
		return nil, fmt.Errorf("error setting field Type: %w", err)
	}
	dbDispatch.Type = xint322
	xstring, err := MustDispatchMessage(source.Message)
	if err != nil {
		return nil, fmt.Errorf("error setting field Message: %w", err)
	}
	dbDispatch.Message = xstring
	return &dbDispatch, nil
}
func (c *ConverterImpl) ConvertEvent(source api.Event) (*db.Event, error) {
	var dbEvent db.Event
	xint32, err := MustInt32Ptr(source.Id)
	if err != nil {
		return nil, fmt.Errorf("error setting field ID: %w", err)
	}
	dbEvent.ID = xint32
	xint322, err := MustInt32Ptr(source.CampaignId)
	if err != nil {
		return nil, fmt.Errorf("error setting field CampaignID: %w", err)
	}
	dbEvent.CampaignID = xint322
	xint323, err := MustInt32Ptr(source.EventType)
	if err != nil {
		return nil, fmt.Errorf("error setting field Type: %w", err)
	}
	dbEvent.Type = xint323
	xstring, err := MustString(source.Faction)
	if err != nil {
		return nil, fmt.Errorf("error setting field Faction: %w", err)
	}
	dbEvent.Faction = xstring
	xint64, err := MustInt64Ptr(source.MaxHealth)
	if err != nil {
		return nil, fmt.Errorf("error setting field MaxHealth: %w", err)
	}
	dbEvent.MaxHealth = xint64
	pgtypeTimestamp, err := MustTimestamp(source.StartTime)
	if err != nil {
		return nil, fmt.Errorf("error setting field StartTime: %w", err)
	}
	dbEvent.StartTime = pgtypeTimestamp
	pgtypeTimestamp2, err := MustTimestamp(source.EndTime)
	if err != nil {
		return nil, fmt.Errorf("error setting field EndTime: %w", err)
	}
	dbEvent.EndTime = pgtypeTimestamp2
	return &dbEvent, nil
}
func (c *ConverterImpl) ConvertEventSnapshot(source api.Event) (*gen.EventSnapshot, error) {
	var genEventSnapshot gen.EventSnapshot
	xint32, err := MustInt32Ptr(source.Id)
	if err != nil {
		return nil, fmt.Errorf("error setting field EventID: %w", err)
	}
	genEventSnapshot.EventID = xint32
	xint64, err := MustInt64Ptr(source.Health)
	if err != nil {
		return nil, fmt.Errorf("error setting field Health: %w", err)
	}
	genEventSnapshot.Health = xint64
	return &genEventSnapshot, nil
}
func (c *ConverterImpl) ConvertPlanet(source api.Planet) (*db.Planet, error) {
	var dbPlanet db.Planet
	genPlanet, err := c.ConvertSinglePlanet(source)
	if err != nil {
		return nil, fmt.Errorf("error setting field Planet: %w", err)
	}
	dbPlanet.Planet = genPlanet
	genBiome, err := MustPlanetBiome(c, source.Biome)
	if err != nil {
		return nil, fmt.Errorf("error setting field Biome: %w", err)
	}
	dbPlanet.Biome = genBiome
	genHazardList, err := MustPlanetHazards(c, source.Hazards)
	if err != nil {
		return nil, fmt.Errorf("error setting field Hazards: %w", err)
	}
	dbPlanet.Hazards = genHazardList
	return &dbPlanet, nil
}
func (c *ConverterImpl) ConvertPlanetBiome(source api.Biome) (gen.Biome, error) {
	var genBiome gen.Biome
	xstring, err := MustString(source.Name)
	if err != nil {
		return genBiome, fmt.Errorf("error setting field Name: %w", err)
	}
	genBiome.Name = xstring
	xstring2, err := MustString(source.Description)
	if err != nil {
		return genBiome, fmt.Errorf("error setting field Description: %w", err)
	}
	genBiome.Description = xstring2
	return genBiome, nil
}
func (c *ConverterImpl) ConvertPlanetHazard(source api.Hazard) (gen.Hazard, error) {
	var genHazard gen.Hazard
	xstring, err := MustString(source.Name)
	if err != nil {
		return genHazard, fmt.Errorf("error setting field Name: %w", err)
	}
	genHazard.Name = xstring
	xstring2, err := MustString(source.Description)
	if err != nil {
		return genHazard, fmt.Errorf("error setting field Description: %w", err)
	}
	genHazard.Description = xstring2
	return genHazard, nil
}
func (c *ConverterImpl) ConvertPlanetSnapshot(source api.Planet) (db.PlanetSnapshot, error) {
	var dbPlanetSnapshot db.PlanetSnapshot
	genPlanetSnapshot, err := c.ConvertPlanetSnapshotOnly(source)
	if err != nil {
		return dbPlanetSnapshot, fmt.Errorf("error setting field PlanetSnapshot: %w", err)
	}
	dbPlanetSnapshot.PlanetSnapshot = genPlanetSnapshot
	pGenEventSnapshot, err := MustEventSnapshot(c, source.Event)
	if err != nil {
		return dbPlanetSnapshot, fmt.Errorf("error setting field Event: %w", err)
	}
	dbPlanetSnapshot.Event = pGenEventSnapshot
	genSnapshotStatistic, err := MustPlanetStatistics(c, source.Statistics)
	if err != nil {
		return dbPlanetSnapshot, fmt.Errorf("error setting field Statistics: %w", err)
	}
	dbPlanetSnapshot.Statistics = genSnapshotStatistic
	return dbPlanetSnapshot, nil
}
func (c *ConverterImpl) ConvertPlanetSnapshotOnly(source api.Planet) (gen.PlanetSnapshot, error) {
	genPlanetSnapshot := DefaultPlanetSnapshot()
	xint32, err := MustInt32Ptr(source.Index)
	if err != nil {
		return genPlanetSnapshot, fmt.Errorf("error setting field PlanetID: %w", err)
	}
	genPlanetSnapshot.PlanetID = xint32
	xint64, err := MustInt64Ptr(source.Health)
	if err != nil {
		return genPlanetSnapshot, fmt.Errorf("error setting field Health: %w", err)
	}
	genPlanetSnapshot.Health = xint64
	xstring, err := MustString(source.CurrentOwner)
	if err != nil {
		return genPlanetSnapshot, fmt.Errorf("error setting field CurrentOwner: %w", err)
	}
	genPlanetSnapshot.CurrentOwner = xstring
	int32List, err := MustInt32Slice(source.Attacking)
	if err != nil {
		return genPlanetSnapshot, fmt.Errorf("error setting field AttackingPlanetIds: %w", err)
	}
	genPlanetSnapshot.AttackingPlanetIds = int32List
	xfloat64, err := MustFloat64Ptr(source.RegenPerSecond)
	if err != nil {
		return genPlanetSnapshot, fmt.Errorf("error setting field RegenPerSecond: %w", err)
	}
	genPlanetSnapshot.RegenPerSecond = xfloat64
	return genPlanetSnapshot, nil
}
func (c *ConverterImpl) ConvertPlanetSnapshots(source []api.Planet) ([]db.PlanetSnapshot, error) {
	var dbPlanetSnapshotList []db.PlanetSnapshot
	if source != nil {
		dbPlanetSnapshotList = make([]db.PlanetSnapshot, len(source))
		for i := 0; i < len(source); i++ {
			dbPlanetSnapshot, err := c.ConvertPlanetSnapshot(source[i])
			if err != nil {
				return nil, fmt.Errorf("error setting index %d: %w", i, err)
			}
			dbPlanetSnapshotList[i] = dbPlanetSnapshot
		}
	}
	return dbPlanetSnapshotList, nil
}
func (c *ConverterImpl) ConvertPlanetSnapshotsOnly(source []api.Planet) ([]gen.PlanetSnapshot, error) {
	var genPlanetSnapshotList []gen.PlanetSnapshot
	if source != nil {
		genPlanetSnapshotList = make([]gen.PlanetSnapshot, len(source))
		for i := 0; i < len(source); i++ {
			genPlanetSnapshot, err := c.ConvertPlanetSnapshotOnly(source[i])
			if err != nil {
				return nil, fmt.Errorf("error setting index %d: %w", i, err)
			}
			genPlanetSnapshotList[i] = genPlanetSnapshot
		}
	}
	return genPlanetSnapshotList, nil
}
func (c *ConverterImpl) ConvertSingleAssignment(source api.Assignment2) (*gen.Assignment, error) {
	var genAssignment gen.Assignment
	xint64, err := MustInt64Ptr(source.Id)
	if err != nil {
		return nil, fmt.Errorf("error setting field ID: %w", err)
	}
	genAssignment.ID = xint64
	xstring, err := MustAssignmentTitle(source.Title)
	if err != nil {
		return nil, fmt.Errorf("error setting field Title: %w", err)
	}
	genAssignment.Title = xstring
	xstring2, err := MustAssignmentBriefing(source.Briefing)
	if err != nil {
		return nil, fmt.Errorf("error setting field Briefing: %w", err)
	}
	genAssignment.Briefing = xstring2
	xstring3, err := MustAssignmentDescription(source.Description)
	if err != nil {
		return nil, fmt.Errorf("error setting field Description: %w", err)
	}
	genAssignment.Description = xstring3
	pgtypeTimestamp, err := MustTimestamp(source.Expiration)
	if err != nil {
		return nil, fmt.Errorf("error setting field Expiration: %w", err)
	}
	genAssignment.Expiration = pgtypeTimestamp
	xint32, err := parseAssignmentRewardType(source.Reward)
	if err != nil {
		return nil, fmt.Errorf("error setting field RewardType: %w", err)
	}
	genAssignment.RewardType = xint32
	pgtypeNumeric, err := parseAssignmentRewardAmount(source.Reward)
	if err != nil {
		return nil, fmt.Errorf("error setting field RewardAmount: %w", err)
	}
	genAssignment.RewardAmount = pgtypeNumeric
	return &genAssignment, nil
}
func (c *ConverterImpl) ConvertSinglePlanet(source api.Planet) (gen.Planet, error) {
	var genPlanet gen.Planet
	xint32, err := MustInt32Ptr(source.Index)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field ID: %w", err)
	}
	genPlanet.ID = xint32
	xstring, err := MustPlanetName(source.Name)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field Name: %w", err)
	}
	genPlanet.Name = xstring
	xstring2, err := MustString(source.Sector)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field Sector: %w", err)
	}
	genPlanet.Sector = xstring2
	float64List, err := MustPlanetPosition(source.Position)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field Position: %w", err)
	}
	genPlanet.Position = float64List
	int32List, err := MustInt32Slice(source.Waypoints)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field WaypointIds: %w", err)
	}
	genPlanet.WaypointIds = int32List
	xbool, err := MustBool(source.Disabled)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field Disabled: %w", err)
	}
	genPlanet.Disabled = xbool
	xstring3, err := MustPlanetBiomeName(c, source.Biome)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field BiomeName: %w", err)
	}
	genPlanet.BiomeName = xstring3
	stringList, err := MustPlanetHazardNames(source.Hazards)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field HazardNames: %w", err)
	}
	genPlanet.HazardNames = stringList
	xint64, err := MustInt64Ptr(source.MaxHealth)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field MaxHealth: %w", err)
	}
	genPlanet.MaxHealth = xint64
	xstring4, err := MustString(source.InitialOwner)
	if err != nil {
		return genPlanet, fmt.Errorf("error setting field InitialOwner: %w", err)
	}
	genPlanet.InitialOwner = xstring4
	return genPlanet, nil
}
func (c *ConverterImpl) ConvertSnapshot(source APIData) (gen.Snapshot, error) {
	genSnapshot := DefaultSnapshot()
	int32List, err := MustSnapshotCampaignIDs(source.Campaigns)
	if err != nil {
		return genSnapshot, fmt.Errorf("error setting field CampaignIds: %w", err)
	}
	genSnapshot.CampaignIds = int32List
	int32List2, err := MustSnapshotDispatchIDs(source.Dispatches)
	if err != nil {
		return genSnapshot, fmt.Errorf("error setting field DispatchIds: %w", err)
	}
	genSnapshot.DispatchIds = int32List2
	return genSnapshot, nil
}
func (c *ConverterImpl) ConvertStatistics(source api.Statistics) (*gen.SnapshotStatistic, error) {
	var genSnapshotStatistic gen.SnapshotStatistic
	pgtypeNumeric, err := MustNumeric(source.MissionsWon)
	if err != nil {
		return nil, fmt.Errorf("error setting field MissionsWon: %w", err)
	}
	genSnapshotStatistic.MissionsWon = pgtypeNumeric
	pgtypeNumeric2, err := MustNumeric(source.MissionsLost)
	if err != nil {
		return nil, fmt.Errorf("error setting field MissionsLost: %w", err)
	}
	genSnapshotStatistic.MissionsLost = pgtypeNumeric2
	pgtypeNumeric3, err := MustNumeric(source.MissionTime)
	if err != nil {
		return nil, fmt.Errorf("error setting field MissionTime: %w", err)
	}
	genSnapshotStatistic.MissionTime = pgtypeNumeric3
	pgtypeNumeric4, err := MustNumeric(source.TerminidKills)
	if err != nil {
		return nil, fmt.Errorf("error setting field TerminidKills: %w", err)
	}
	genSnapshotStatistic.TerminidKills = pgtypeNumeric4
	pgtypeNumeric5, err := MustNumeric(source.AutomatonKills)
	if err != nil {
		return nil, fmt.Errorf("error setting field AutomatonKills: %w", err)
	}
	genSnapshotStatistic.AutomatonKills = pgtypeNumeric5
	pgtypeNumeric6, err := MustNumeric(source.IlluminateKills)
	if err != nil {
		return nil, fmt.Errorf("error setting field IlluminateKills: %w", err)
	}
	genSnapshotStatistic.IlluminateKills = pgtypeNumeric6
	pgtypeNumeric7, err := MustNumeric(source.BulletsFired)
	if err != nil {
		return nil, fmt.Errorf("error setting field BulletsFired: %w", err)
	}
	genSnapshotStatistic.BulletsFired = pgtypeNumeric7
	pgtypeNumeric8, err := MustNumeric(source.BulletsHit)
	if err != nil {
		return nil, fmt.Errorf("error setting field BulletsHit: %w", err)
	}
	genSnapshotStatistic.BulletsHit = pgtypeNumeric8
	pgtypeNumeric9, err := MustNumeric(source.TimePlayed)
	if err != nil {
		return nil, fmt.Errorf("error setting field TimePlayed: %w", err)
	}
	genSnapshotStatistic.TimePlayed = pgtypeNumeric9
	pgtypeNumeric10, err := MustNumeric(source.Deaths)
	if err != nil {
		return nil, fmt.Errorf("error setting field Deaths: %w", err)
	}
	genSnapshotStatistic.Deaths = pgtypeNumeric10
	pgtypeNumeric11, err := MustNumeric(source.Revives)
	if err != nil {
		return nil, fmt.Errorf("error setting field Revives: %w", err)
	}
	genSnapshotStatistic.Revives = pgtypeNumeric11
	pgtypeNumeric12, err := MustNumeric(source.Friendlies)
	if err != nil {
		return nil, fmt.Errorf("error setting field Friendlies: %w", err)
	}
	genSnapshotStatistic.Friendlies = pgtypeNumeric12
	pgtypeNumeric13, err := MustNumeric(source.PlayerCount)
	if err != nil {
		return nil, fmt.Errorf("error setting field PlayerCount: %w", err)
	}
	genSnapshotStatistic.PlayerCount = pgtypeNumeric13
	return &genSnapshotStatistic, nil
}
func (c *ConverterImpl) ConvertWar(source APIData) (*db.War, error) {
	var dbWar db.War
	xint32, err := MustWarID(source.WarID)
	if err != nil {
		return nil, fmt.Errorf("error setting field ID: %w", err)
	}
	dbWar.ID = xint32
	var pTimeTime *time.Time
	if source.War != nil {
		pTimeTime = source.War.Started
	}
	pgtypeTimestamp, err := MustTimestamp(pTimeTime)
	if err != nil {
		return nil, fmt.Errorf("error setting field StartTime: %w", err)
	}
	dbWar.StartTime = pgtypeTimestamp
	var pTimeTime2 *time.Time
	if source.War != nil {
		pTimeTime2 = source.War.Ended
	}
	pgtypeTimestamp2, err := MustTimestamp(pTimeTime2)
	if err != nil {
		return nil, fmt.Errorf("error setting field EndTime: %w", err)
	}
	dbWar.EndTime = pgtypeTimestamp2
	var pStringList *[]string
	if source.War != nil {
		pStringList = source.War.Factions
	}
	stringList, err := MustStringSlice(pStringList)
	if err != nil {
		return nil, fmt.Errorf("error setting field Factions: %w", err)
	}
	dbWar.Factions = stringList
	return &dbWar, nil
}
func (c *ConverterImpl) ConvertWarSnapshot(source APIData) (*gen.WarSnapshot, error) {
	var genWarSnapshot gen.WarSnapshot
	xint32, err := MustWarID(source.WarID)
	if err != nil {
		return nil, fmt.Errorf("error setting field WarID: %w", err)
	}
	genWarSnapshot.WarID = xint32
	var pFloat64 *float64
	if source.War != nil {
		pFloat64 = source.War.ImpactMultiplier
	}
	xfloat64, err := MustFloat64Ptr(pFloat64)
	if err != nil {
		return nil, fmt.Errorf("error setting field ImpactMultiplier: %w", err)
	}
	genWarSnapshot.ImpactMultiplier = xfloat64
	return &genWarSnapshot, nil
}
func (c *ConverterImpl) ConvertWarStatistics(source *api.War_Statistics) (*gen.SnapshotStatistic, error) {
	return MustWarStatistics(c, source)
}
