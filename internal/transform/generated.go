// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package transform

import (
	"fmt"
	api "github.com/stnokott/helldivers-client/internal/api"
	db "github.com/stnokott/helldivers-client/internal/db"
	gen "github.com/stnokott/helldivers-client/internal/db/gen"
)

type ConverterImpl struct{}

func (c *ConverterImpl) ConvertAssignment(source api.Assignment2) (*db.Assignment, error) {
	return MustAssignment(c, source)
}
func (c *ConverterImpl) ConvertAssignmentTask(source api.Task2) (gen.AssignmentTask, error) {
	var genAssignmentTask gen.AssignmentTask
	xint32, err := MustInt32Ptr(source.Type)
	if err != nil {
		return genAssignmentTask, fmt.Errorf("error setting field TaskType: %w", err)
	}
	genAssignmentTask.TaskType = xint32
	int32List, err := MustInt32Slice(source.Values)
	if err != nil {
		return genAssignmentTask, fmt.Errorf("error setting field Values: %w", err)
	}
	genAssignmentTask.Values = int32List
	int32List2, err := MustInt32Slice(source.ValueTypes)
	if err != nil {
		return genAssignmentTask, fmt.Errorf("error setting field ValueTypes: %w", err)
	}
	genAssignmentTask.ValueTypes = int32List2
	return genAssignmentTask, nil
}
func (c *ConverterImpl) ConvertAssignmentTasks(source []api.Task2) ([]gen.AssignmentTask, error) {
	var genAssignmentTaskList []gen.AssignmentTask
	if source != nil {
		genAssignmentTaskList = make([]gen.AssignmentTask, len(source))
		for i := 0; i < len(source); i++ {
			genAssignmentTask, err := c.ConvertAssignmentTask(source[i])
			if err != nil {
				return nil, fmt.Errorf("error setting index %d: %w", i, err)
			}
			genAssignmentTaskList[i] = genAssignmentTask
		}
	}
	return genAssignmentTaskList, nil
}
func (c *ConverterImpl) ConvertDispatch(source api.Dispatch) (*db.Dispatch, error) {
	var dbDispatch db.Dispatch
	xint32, err := MustInt32Ptr(source.Id)
	if err != nil {
		return nil, fmt.Errorf("error setting field ID: %w", err)
	}
	dbDispatch.ID = xint32
	pgtypeTimestamp, err := MustTimestamp(source.Published)
	if err != nil {
		return nil, fmt.Errorf("error setting field CreateTime: %w", err)
	}
	dbDispatch.CreateTime = pgtypeTimestamp
	xint322, err := MustInt32Ptr(source.Type)
	if err != nil {
		return nil, fmt.Errorf("error setting field Type: %w", err)
	}
	dbDispatch.Type = xint322
	xstring, err := MustString(source.Message)
	if err != nil {
		return nil, fmt.Errorf("error setting field Message: %w", err)
	}
	dbDispatch.Message = xstring
	return &dbDispatch, nil
}
func (c *ConverterImpl) ConvertSingleAssignment(source api.Assignment2) (gen.Assignment, error) {
	var genAssignment gen.Assignment
	xint64, err := MustInt64Ptr(source.Id)
	if err != nil {
		return genAssignment, fmt.Errorf("error setting field ID: %w", err)
	}
	genAssignment.ID = xint64
	xstring, err := MustString(source.Title)
	if err != nil {
		return genAssignment, fmt.Errorf("error setting field Title: %w", err)
	}
	genAssignment.Title = xstring
	xstring2, err := MustString(source.Briefing)
	if err != nil {
		return genAssignment, fmt.Errorf("error setting field Briefing: %w", err)
	}
	genAssignment.Briefing = xstring2
	xstring3, err := MustString(source.Description)
	if err != nil {
		return genAssignment, fmt.Errorf("error setting field Description: %w", err)
	}
	genAssignment.Description = xstring3
	pgtypeTimestamp, err := MustTimestamp(source.Expiration)
	if err != nil {
		return genAssignment, fmt.Errorf("error setting field Expiration: %w", err)
	}
	genAssignment.Expiration = pgtypeTimestamp
	xint32, err := parseAssignmentRewardType(source.Reward)
	if err != nil {
		return genAssignment, fmt.Errorf("error setting field RewardType: %w", err)
	}
	genAssignment.RewardType = xint32
	xint322, err := parseAssignmentRewardAmount(source.Reward)
	if err != nil {
		return genAssignment, fmt.Errorf("error setting field RewardAmount: %w", err)
	}
	genAssignment.RewardAmount = xint322
	return genAssignment, nil
}
