CREATE TABLE IF NOT EXISTS war_snapshots
(
    id bigint NOT NULL UNIQUE GENERATED ALWAYS AS IDENTITY,
    war_id integer NOT NULL,
    impact_multiplier double precision NOT NULL CHECK (impact_multiplier >= 0),
    PRIMARY KEY (id)
);

COMMENT ON TABLE war_snapshots
    IS 'Contains the dynamic data about a war.';

COMMENT ON COLUMN war_snapshots.id
    IS 'Auto-generated by sequence';

COMMENT ON COLUMN war_snapshots.impact_multiplier
    IS 'A fraction used to calculate the impact of a mission on the war effort';

		

CREATE TABLE IF NOT EXISTS event_snapshots
(
    id bigint NOT NULL UNIQUE GENERATED ALWAYS AS IDENTITY,
    event_id integer NOT NULL REFERENCES events,
    health bigint NOT NULL CHECK (health >= 0),
    PRIMARY KEY (id)
);

COMMENT ON TABLE event_snapshots
    IS 'Contains dynamic data about a currently-ongoing event';

COMMENT ON COLUMN event_snapshots.id
    IS 'Auto-generated by sequence';



CREATE TABLE IF NOT EXISTS assignment_snapshots
(
    id bigint NOT NULL UNIQUE GENERATED ALWAYS AS IDENTITY,
    assignment_id bigint NOT NULL REFERENCES assignments,
    progress integer[] NOT NULL,
    PRIMARY KEY (id)
);

COMMENT ON COLUMN assignment_snapshots.progress
    IS 'A list of numbers, how they represent progress is unknown.';



CREATE TABLE IF NOT EXISTS snapshot_statistics
(
    id bigint NOT NULL UNIQUE GENERATED ALWAYS AS IDENTITY,
    missions_won numeric NOT NULL CHECK (missions_won >= 0),
    missions_lost numeric NOT NULL CHECK (missions_lost >= 0),
    mission_time numeric NOT NULL CHECK (mission_time >= 0),
    terminid_kills numeric NOT NULL CHECK (terminid_kills >= 0),
    automaton_kills numeric NOT NULL CHECK (automaton_kills >= 0),
    illuminate_kills numeric NOT NULL CHECK (illuminate_kills >= 0),
    bullets_fired numeric NOT NULL CHECK (bullets_fired >= 0),
    bullets_hit numeric NOT NULL CHECK (bullets_hit >= 0),
    time_played numeric NOT NULL CHECK (time_played >= 0),
    deaths numeric NOT NULL CHECK (deaths >= 0),
    revives numeric NOT NULL CHECK (revives >= 0),
    friendlies numeric NOT NULL CHECK (friendlies >= 0),
    player_count numeric NOT NULL CHECK (player_count >= 0),
    PRIMARY KEY (id)
);

COMMENT ON TABLE snapshot_statistics
    IS 'Contains statistics of missions, kills, success rate etc';

COMMENT ON COLUMN snapshot_statistics.id
    IS 'Auto-generated by sequence';

COMMENT ON COLUMN snapshot_statistics.mission_time
    IS 'The total amount of time spent planetside (in seconds)';

COMMENT ON COLUMN snapshot_statistics.time_played
    IS 'The total amount of time played (including off-planet) in seconds';

COMMENT ON COLUMN snapshot_statistics.deaths
    IS 'The amount of casualties on the side of humanity';

COMMENT ON COLUMN snapshot_statistics.revives
    IS 'The amount of revives(?)';

COMMENT ON COLUMN snapshot_statistics.friendlies
    IS 'The amount of friendly fire casualties';

COMMENT ON COLUMN snapshot_statistics.player_count
    IS 'The total amount of players present (at the time of the snapshot)';



CREATE TABLE IF NOT EXISTS planet_snapshots
(
    id bigint NOT NULL UNIQUE GENERATED ALWAYS AS IDENTITY,
    planet_id integer NOT NULL,
    health bigint NOT NULL CHECK (health >= 0),
    current_owner text NOT NULL CHECK (current_owner <> ''),
    event_snapshot_id bigint REFERENCES event_snapshots,
    attacking_planet_ids integer[] NOT NULL,
    regen_per_second double precision NOT NULL CONSTRAINT regen_per_second_not_negative CHECK (regen_per_second >= 0),
    statistics_id bigint NOT NULL REFERENCES snapshot_statistics,
    PRIMARY KEY (id)
);

CREATE OR REPLACE FUNCTION validate_planet_snapshot_refs() RETURNS TRIGGER AS $validate_planet_snapshot_refs$
	DECLARE
		new_attacking_planet_id integer;
    BEGIN
		-- check attacking planet IDs
		FOREACH new_attacking_planet_id IN ARRAY NEW.attacking_planet_ids LOOP
			IF NOT EXISTS (SELECT 1 FROM planets WHERE id = new_attacking_planet_id) THEN
				RAISE EXCEPTION 'planet statistic ID=% has non-existent attacking planet ID %', NEW.id, new_attacking_planet_id;
			END IF;
		END LOOP;

        RETURN NEW;
    END;
$validate_planet_snapshot_refs$ LANGUAGE plpgsql;

CREATE TRIGGER validate_planet_snapshot_refs BEFORE INSERT OR UPDATE ON planet_snapshots
    FOR EACH ROW EXECUTE FUNCTION validate_planet_snapshot_refs();

COMMENT ON TABLE planet_snapshots
    IS 'Contains dynamic data about a planet currently part of this war';

COMMENT ON COLUMN planet_snapshots.id
    IS 'Auto-generated by sequence';

COMMENT ON COLUMN planet_snapshots.planet_id
    IS 'ID of the planet this snapshot captures.';

COMMENT ON COLUMN planet_snapshots.health
    IS 'The current health this planet has';

COMMENT ON COLUMN planet_snapshots.current_owner
    IS 'The faction that currently controls the planet';

COMMENT ON COLUMN planet_snapshots.event_snapshot_id
    IS 'Information on the active event ongoing on this planet, if one is active';

COMMENT ON COLUMN planet_snapshots.attacking_planet_ids
    IS 'A list of Index integers that this planet is currently attacking.';

COMMENT ON COLUMN planet_snapshots.regen_per_second
    IS 'How much the planet regenerates per second if left alone';

COMMENT ON COLUMN planet_snapshots.statistics_id
    IS 'A set of statistics scoped to this planet.';



CREATE TABLE IF NOT EXISTS snapshots
(
    create_time timestamp without time zone NOT NULL UNIQUE DEFAULT CURRENT_TIMESTAMP,
    war_snapshot_id bigint NOT NULL REFERENCES war_snapshots,
    assignment_snapshot_ids bigint[] NOT NULL,
    campaign_ids integer[] NOT NULL,
    dispatch_ids integer[] NOT NULL,
    planet_snapshot_ids bigint[] NOT NULL,
    statistics_id bigint NOT NULL REFERENCES snapshot_statistics,
    PRIMARY KEY (create_time)
);

CREATE OR REPLACE FUNCTION validate_snapshot_refs() RETURNS TRIGGER AS $validate_snapshot_refs$
	DECLARE
		new_assignment_snapshot_id bigint;
        new_campaign_id integer;
        new_dispatch_id integer;
        new_planet_snapshot_id integer;
    BEGIN
		-- check assignment snapshot refs
		FOREACH new_assignment_snapshot_id IN ARRAY NEW.assignment_snapshot_ids LOOP
			IF NOT EXISTS (SELECT 1 FROM assignment_snapshots WHERE id = new_assignment_snapshot_id) THEN
				RAISE EXCEPTION 'snapshot at % has non-existent assignment snapshot ID %', NEW.create_time, new_assignment_snapshot_id;
			END IF;
		END LOOP;

        -- check campaign refs
		FOREACH new_campaign_id IN ARRAY NEW.campaign_ids LOOP
			IF NOT EXISTS (SELECT 1 FROM campaigns WHERE id = new_campaign_id) THEN
				RAISE EXCEPTION 'snapshot at % has non-existent campaign ID %', NEW.create_time, new_campaign_id;
			END IF;
		END LOOP;

        -- check dispatch refs
		FOREACH new_dispatch_id IN ARRAY NEW.dispatch_ids LOOP
			IF NOT EXISTS (SELECT 1 FROM dispatches WHERE id = new_dispatch_id) THEN
				RAISE EXCEPTION 'snapshot at % has non-existent dispatch ID %', NEW.create_time, new_dispatch_id;
			END IF;
		END LOOP;

        -- check planet snapshot refs
		FOREACH new_planet_snapshot_id IN ARRAY NEW.planet_snapshot_ids LOOP
			IF NOT EXISTS (SELECT 1 FROM planet_snapshots WHERE id = new_planet_snapshot_id) THEN
				RAISE EXCEPTION 'snapshot at % has non-existent planet snapshot ID %', NEW.create_time, new_planet_snapshot_id;
			END IF;
		END LOOP;

        RETURN NEW;
    END;
$validate_snapshot_refs$ LANGUAGE plpgsql;

CREATE TRIGGER validate_snapshot_refs BEFORE INSERT OR UPDATE ON snapshots
    FOR EACH ROW EXECUTE FUNCTION validate_snapshot_refs();

COMMENT ON TABLE snapshots
    IS 'Contains the dynamic data of any metrics changing over time.';

COMMENT ON COLUMN snapshots.create_time
    IS 'The time the snapshot of the war was taken, auto-generated as current timestamp';

COMMENT ON COLUMN snapshots.war_snapshot_id
    IS 'Dynamic data about current war';

COMMENT ON COLUMN snapshots.assignment_snapshot_ids
    IS 'Snapshots for currently active assignments';

COMMENT ON COLUMN snapshots.campaign_ids
    IS 'Currently active campaigns';

COMMENT ON COLUMN snapshots.dispatch_ids
    IS 'Currently active dispatches';

COMMENT ON COLUMN snapshots.planet_snapshot_ids
    IS 'Dynamic data about planets at point of snapshot';

COMMENT ON COLUMN snapshots.statistics_id
    IS 'Global statistics for the current war';
